<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on KK's Blog (fromkk)</title><link>https://fromkk.com/tags/python/</link><description>Recent content in Python on KK's Blog (fromkk)</description><generator>Hugo</generator><language>en</language><managingEditor>bebound@gmail.com (KK)</managingEditor><webMaster>bebound@gmail.com (KK)</webMaster><lastBuildDate>Sun, 10 Aug 2025 18:44:06 +0800</lastBuildDate><atom:link href="https://fromkk.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Namespace Package in Python</title><link>https://fromkk.com/posts/namespace-package-in-python/</link><pubDate>Sun, 10 Aug 2025 18:04:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/namespace-package-in-python/</guid><description>&lt;p>Recently, there is a &lt;a href="https://github.com/Azure/azure-cli/issues/31843#issuecomment-3125269740" target="_blank" rel="noopener noreffer ">GitHub issue&lt;/a> about namespace package in Azure CLI. I think it is a good time to write down the knowledge about namespace package.&lt;/p>
&lt;h2 id="what-is-namespace-package">What is Namespace Package&lt;/h2>
&lt;p>If several packages share the same root folder, then the root folder is a namespace package. &lt;code>subpackageA&lt;/code> and &lt;code>subpackageb&lt;/code> can be installed separately, even in different Python path, but they can be imported as importing a single package: &lt;code>import root&lt;/code>.&lt;/p></description></item><item><title>Modern pip build process (–use-pep517)</title><link>https://fromkk.com/posts/modern-pip-build-process-use-pep517/</link><pubDate>Sun, 24 Nov 2024 20:49:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/modern-pip-build-process-use-pep517/</guid><description>&lt;p>Nowadays, &lt;code>pyproject.toml&lt;/code> becomes the standard configuration file for packaging. Compare with the old &lt;code>setup.py&lt;/code>, it adds two feature pep517 and pep518.&lt;/p>
&lt;p>&lt;a href="https://peps.python.org/pep-0517/" target="_blank" rel="noopener noreffer ">pep517&lt;/a> defines two hooks: &lt;code>build_wheel&lt;/code> and &lt;code>build_sdist&lt;/code>, which is required to build the package from source. Each build backend must implement these two hooks. It makes it possible to create other build backend such as &lt;code>flit&lt;/code> or &lt;code>poetry&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">build-system&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Defined by PEP 518:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">requires&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;flit&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Defined by this PEP:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">build-backend&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;local_backend&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">backend-path&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;backend&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Besides &lt;code>setuptools&lt;/code>, there are some other build back-end such as &lt;code>hatchling&lt;/code> and &lt;code>flit&lt;/code>. You can find the example here: &lt;a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-a-build-backend" target="_blank" rel="noopener noreffer ">Python Packaging Uer Guide - Choosing a build backend&lt;/a>&lt;/p></description></item><item><title>sys.path in Python</title><link>https://fromkk.com/posts/sys-dot-path-in-python/</link><pubDate>Sun, 11 Aug 2024 15:56:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/sys-dot-path-in-python/</guid><description>&lt;p>Here is the process how &lt;code>sys.path&lt;/code> is set in Python, with some parts omitted.&lt;/p>
&lt;h2 id="python-command-line-arguments">Python Command Line Arguments&lt;/h2>
&lt;p>By default, as initialized upon program startup, a potentially unsafe path is prepended to &lt;code>sys.path&lt;/code>:&lt;/p>
&lt;p>&lt;code>python -m&lt;/code>: prepend the current working directory.&lt;/p>
&lt;p>&lt;code>python script.py&lt;/code>: prepend the script’s directory. If it’s a symbolic link, resolve symbolic links.&lt;/p>
&lt;p>&lt;code>python -c&lt;/code> and python (REPL): prepend an empty string, which means the current working directory.&lt;/p>
&lt;p>You can remove these path with &lt;code>-P&lt;/code> param.&lt;/p></description></item><item><title>__import__ in Python</title><link>https://fromkk.com/posts/import-in-python/</link><pubDate>Sun, 07 Apr 2024 15:58:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/import-in-python/</guid><description>&lt;p>It&amp;rsquo;s known that Python&amp;rsquo;s &lt;code>import&lt;/code> statement is implemented by &lt;code>__import__&lt;/code> function. In general, if we want to import a module dynamically, we can use &lt;code>import_module&lt;/code> function, which is a wrapper around &lt;code>__import__&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>The most important difference between these two functions is that import_module() returns the specified package or module (e.g. pkg.mod), while &lt;strong>import&lt;/strong>() returns the top-level package or module (e.g. pkg). &amp;ndash; &lt;a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" target="_blank" rel="noopener noreffer ">https://docs.python.org/3/library/importlib.html#importlib.import_module&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>import itertools&lt;/code> and &lt;code>from requests import exceptions&lt;/code> can be translated to:&lt;/p></description></item><item><title>Python 3.11 changes</title><link>https://fromkk.com/posts/python-3-dot-11-changes/</link><pubDate>Sun, 10 Dec 2023 15:24:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/python-3-dot-11-changes/</guid><description>&lt;p>In &lt;a href="https://github.com/Azure/azure-cli/pull/26923" target="_blank" rel="noopener noreffer ">[Packaging] Support Python 3.11 by bebound · Pull Request #26923 · Azure/azure-cli (github.com)&lt;/a> , I bumped azure-cli to use Python 3.11. We&amp;rsquo;ve bump the dependency in other PRs, I thought it should be a small PR, but in the end, a lot of changes are made.&lt;/p>
&lt;h2 id="args-dot-getargspec">&lt;code>args.getargspec&lt;/code>&lt;/h2>
&lt;p>&lt;code>getargspec&lt;/code> is dropped in 3.11. You can easily replaced it with &lt;a href="https://docs.python.org/3/library/inspect.html#inspect.getfullargspec" target="_blank" rel="noopener noreffer ">&lt;code>getfullargspec&lt;/code>&lt;/a> . It returns &lt;code>FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)&lt;/code> instead of &lt;code>ArgSpec(args, varargs, keywords, defaults)&lt;/code> So &lt;code>args, _, kw, _ = inspect.getargspec(fn)&lt;/code> can be replaced by &lt;code>args, _, kw, *_ = inspect.getfullargspec(fn)&lt;/code> However, &lt;code>getfullargspec&lt;/code> is retained primarily for use in code that needs to maintain compatibility with the Python 2 &lt;code>inspect&lt;/code> module API.&lt;/p></description></item><item><title>Memory Leak in Python multiprocessing.Pool</title><link>https://fromkk.com/posts/memory-leak-in-python-multiprocessing-dot-pool/</link><pubDate>Wed, 16 Mar 2022 21:04:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/memory-leak-in-python-multiprocessing-dot-pool/</guid><description>&lt;p>There is a historical memory leak problem in our Django app and I fixed it recently. As time goes by, the memory usage of app keeps growing and so does the CPU usage.&lt;/p>
&lt;figure>&lt;img src="https://fromkk.com/images/pool_before.png">
&lt;/figure>

&lt;p>After some research, I figure out the cause. Some views does not close &lt;code>multiprocessing.Pool&lt;/code> after using it. The problem disappears when I use &lt;code>Pool&lt;/code> with &lt;code>with&lt;/code> statement.&lt;/p>
&lt;figure>&lt;img src="https://fromkk.com/images/pool_after.png">
&lt;/figure>

&lt;p>But I&amp;rsquo;m still interested in it and wrote some testing code. The script is run in Python 3.6.8 and produce similar result when using &lt;code>multiprocessing.ThreadPool&lt;/code>.&lt;/p></description></item><item><title>How to disable auto strip in Charfield in Django</title><link>https://fromkk.com/posts/how-to-disable-auto-strip-in-charfield-in-django/</link><pubDate>Sun, 19 Dec 2021 21:20:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/how-to-disable-auto-strip-in-charfield-in-django/</guid><description>&lt;p>In Django, when edit field in admin page or post data to forms, the leading and tailing whitespace in &lt;code>CharField&lt;/code> and &lt;code>TextField&lt;/code> are removed.&lt;/p>
&lt;p>The reason is &lt;code>strip=True&lt;/code> parameter in &lt;code>forms.CharField&lt;/code>, which is added in Djagno 1.9. You can see the discussion in &lt;a href="https://code.djangoproject.com/ticket/4960" target="_blank" rel="noopener noreffer ">django tiket #4960&lt;/a> and here is &lt;a href="https://github.com/django/django/blob/4ce59f602ed28320caf3035212cb4d1c5430da2b/django/forms/fields.py#L211" target="_blank" rel="noopener noreffer ">source code&lt;/a>. &lt;code>models.CharField&lt;/code> and &lt;code>models.TextField&lt;/code> use &lt;code>formfield()&lt;/code> to create form to interact with user, then both of them eventually create a &lt;code>forms.CharField&lt;/code>&lt;/p></description></item><item><title>Using JSONField before Django 3.1</title><link>https://fromkk.com/posts/using-jsonfield-before-django-3-dot-1/</link><pubDate>Sat, 11 Sep 2021 21:12:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/using-jsonfield-before-django-3-dot-1/</guid><description>&lt;p>In Django 3.1, Django support save python data into database as JSON encoded data and it is also possible to make query based on field value in JSONField. The detailed usage can be found &lt;a href="https://docs.djangoproject.com/en/3.2/topics/db/queries/#querying-jsonfield" target="_blank" rel="noopener noreffer ">here&lt;/a>. If you are using older version and want to try this feature. Though there are many packages ported this function, I recommend &lt;a href="https://github.com/laymonage/django-jsonfield-backport" target="_blank" rel="noopener noreffer ">django-jsonfield-backport&lt;/a>.&lt;/p>
&lt;h2 id="django-jsonfield-backport">django-jsonfield-backport&lt;/h2>
&lt;p>This package save data as JSON in database and also support JSON query. If your database meet the requirements (MySQL &amp;gt; 5.7, PG &amp;gt; 9.5, MariaDB &amp;gt; 10.2 or SQLite &amp;gt; 3.9 with &lt;a href="https://docs.djangoproject.com/en/3.1/ref/databases/#sqlite-json1" target="_blank" rel="noopener noreffer ">JSON1&lt;/a> extension), you can use JSONField like Django&amp;rsquo;s native implementation.&lt;/p></description></item><item><title>Using cibuildwheel to Create Python Wheels</title><link>https://fromkk.com/posts/using-cibuildwheel-to-create-python-wheels/</link><pubDate>Wed, 29 Jul 2020 22:53:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/using-cibuildwheel-to-create-python-wheels/</guid><description>&lt;p>Have you ever tried to install &lt;code>MySQL-python&lt;/code>? It contains the C code and need to compile the code while install the package. You have to follow the steps in this articles: &lt;a href="https://ruddra.com/install-mysqlclient-macos/" target="_blank" rel="noopener noreffer ">Install MySQL and MySQLClient(Python) in MacOS&lt;/a>. Things get worse if you are using Windows.&lt;/p>
&lt;p>Luckily, as new distribution format &lt;strong>Wheel&lt;/strong> has been published in &lt;a href="https://www.python.org/dev/peps/pep-0427/" target="_blank" rel="noopener noreffer ">PEP 427&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>The wheel binary package format frees installers from having to know about the build system, saves time by amortizing compile time over many installations, and removes the need to install a build system in the target environment.&lt;/p></description></item><item><title>Import custom package or module in PySpark</title><link>https://fromkk.com/posts/import-custom-package-or-module-in-pyspark/</link><pubDate>Thu, 02 Apr 2020 22:24:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/import-custom-package-or-module-in-pyspark/</guid><description>&lt;p>First zip all of the dependencies into zip file like this. Then you can use one of the following methods to import it.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-nil" data-lang="nil">|-- kk.zip
| |-- kk.py
&lt;/code>&lt;/pre>&lt;h2 id="using-py-files-in-spark-submit">Using &amp;ndash;py-files in spark-submit&lt;/h2>
&lt;p>When submit spark job, add &lt;code>--py-files=kk.zip&lt;/code> parameter. &lt;code>kk.zip&lt;/code> will be distributed with the main scrip file, and &lt;code>kk.zip&lt;/code> will be inserted at the beginning of &lt;code>PATH&lt;/code> environment variable.&lt;/p>
&lt;p>Then you can use &lt;code>import kk&lt;/code> in your main script file.&lt;/p></description></item><item><title>C3 Linearization and Python MRO(Method Resolution Order)</title><link>https://fromkk.com/posts/c3-linearization-and-python-mro--method-resolution-order/</link><pubDate>Sat, 14 Mar 2020 17:37:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/c3-linearization-and-python-mro--method-resolution-order/</guid><description>&lt;p>Python supports multiple inheritance, its class can be derived from more than one base classes. If the specified attribute or methods was not found in current class, how to decide the search sequence from superclasses? In simple scenario, we know left-to right, bottom to up. But when the inheritance hierarchy become complicated, it&amp;rsquo;s not easy to answer by intuition.&lt;/p>
&lt;p>For instance, what&amp;rsquo;s search sequence of class M?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">X&lt;/span>:&lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Y&lt;/span>: &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Z&lt;/span>:&lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>(X,Y):&lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span>(Y,Z):&lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">M&lt;/span>(B,A,Z):&lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure class="image-size-s">&lt;img src="https://fromkk.com/images/python_mro.png">
&lt;/figure>

&lt;p>The answer is: &lt;code>M, B, A, X, Y, Z, object&lt;/code>&lt;/p></description></item><item><title>Torchtext snippets</title><link>https://fromkk.com/posts/torchtext-snippets/</link><pubDate>Mon, 01 Jul 2019 21:28:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/torchtext-snippets/</guid><description>&lt;h2 id="load-separate-files">Load separate files&lt;/h2>
&lt;p>&lt;code>data.Field&lt;/code> parameters is &lt;a href="https://torchtext.readthedocs.io/en/latest/data.html#torchtext.data.Field" target="_blank" rel="noopener noreffer ">here&lt;/a>.&lt;/p>
&lt;p>When calling &lt;code>build_vocab&lt;/code>, torchtext will add &lt;code>&amp;lt;unk&amp;gt;&lt;/code> in vocabulary list. Set &lt;code>unk_token=None&lt;/code> if you want to remove it. If &lt;code>sequential=True&lt;/code> (default), it will add &lt;code>&amp;lt;pad&amp;gt;&lt;/code> in vocab. &lt;code>&amp;lt;unk&amp;gt;&lt;/code> and &lt;code>&amp;lt;pad&amp;gt;&lt;/code> will add at the beginning of vocabulary list by default.&lt;/p>
&lt;p>&lt;code>LabelField&lt;/code> is similar to Field, but it will set &lt;code>sequential=False&lt;/code>, &lt;code>unk_token=None&lt;/code> and &lt;code>is_target=Ture&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>INPUT &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>Field(lower&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, batch_first&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TAG &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>LabelField()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>train, val, test &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>TabularDataset&lt;span style="color:#f92672">.&lt;/span>splits(path&lt;span style="color:#f92672">=&lt;/span>base_dir&lt;span style="color:#f92672">.&lt;/span>as_posix(), train&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;train_data.csv&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> validation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;val_data.csv&amp;#39;&lt;/span>, test&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;test_data.csv&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> format&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;tsv&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fields&lt;span style="color:#f92672">=&lt;/span>[(&lt;span style="color:#66d9ef">None&lt;/span>, &lt;span style="color:#66d9ef">None&lt;/span>), (&lt;span style="color:#e6db74">&amp;#39;input&amp;#39;&lt;/span>, INPUT), (&lt;span style="color:#e6db74">&amp;#39;tag&amp;#39;&lt;/span>, TAG)])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="load-single-file">Load single file&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>all_data &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>TabularDataset(path&lt;span style="color:#f92672">=&lt;/span>base_dir &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#e6db74">&amp;#39;gossip_train_data.csv&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> format&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;tsv&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fields&lt;span style="color:#f92672">=&lt;/span>[(&lt;span style="color:#e6db74">&amp;#39;text&amp;#39;&lt;/span>, TEXT), (&lt;span style="color:#e6db74">&amp;#39;category&amp;#39;&lt;/span>, CATEGORY)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>train, val, test &lt;span style="color:#f92672">=&lt;/span> all_data&lt;span style="color:#f92672">.&lt;/span>split([&lt;span style="color:#ae81ff">0.7&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>, &lt;span style="color:#ae81ff">0.1&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-iterator">Create iterator&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>train_iter, val_iter, test_iter &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>BucketIterator&lt;span style="color:#f92672">.&lt;/span>splits(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (train, val, test), batch_sizes&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">32&lt;/span>, &lt;span style="color:#ae81ff">256&lt;/span>, &lt;span style="color:#ae81ff">256&lt;/span>), shuffle&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort_key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">lambda&lt;/span> x: x&lt;span style="color:#f92672">.&lt;/span>input)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="load-pretrained-vector">Load pretrained vector&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>vectors &lt;span style="color:#f92672">=&lt;/span> Vectors(name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cc.zh.300.vec&amp;#39;&lt;/span>, cache&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;./&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INPUT&lt;span style="color:#f92672">.&lt;/span>build_vocab(train, vectors&lt;span style="color:#f92672">=&lt;/span>vectors)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TAG&lt;span style="color:#f92672">.&lt;/span>build_vocab(train, val, test)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="check-vocab-sizes">Check vocab sizes&lt;/h2>
&lt;p>You can view vocab index by &lt;code>vocab.itos&lt;/code>.&lt;/p></description></item><item><title>Circular Import in Python</title><link>https://fromkk.com/posts/circular-import-in-python/</link><pubDate>Sun, 10 Mar 2019 10:59:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/circular-import-in-python/</guid><description>&lt;p>Recently, I found a really good example code for Python circular import, and I&amp;rsquo;d like to record it here.&lt;/p>
&lt;p>Here is the code:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># X.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">X1&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;x1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Y &lt;span style="color:#f92672">import&lt;/span> Y2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">X2&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;x2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Y.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">Y1&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;y1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> X &lt;span style="color:#f92672">import&lt;/span> X1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">Y2&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;y2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Guess what will happen if you run &lt;code>python X.py&lt;/code> and &lt;code>python Y.py&lt;/code>?&lt;/p></description></item><item><title>Python Dictionary Implementation</title><link>https://fromkk.com/posts/python-dictionary-implementation/</link><pubDate>Sun, 17 Feb 2019 21:48:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/python-dictionary-implementation/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;ol>
&lt;li>CPython allocation memory to save dictionary, the initial table size is 8, entries are saved as &lt;code>&amp;lt;hash,key,value&amp;gt;&lt;/code> in each slot(The slot content changed after Python 3.6).&lt;/li>
&lt;li>When a new key is added, python use &lt;code>i = hash(key) &amp;amp; mask&lt;/code> where &lt;code>mask=table_size-1&lt;/code> to calculate which slot it should be placed. If the slot is occupied, CPython using a probing algorithm to find the empty slot to store new item.&lt;/li>
&lt;li>When 2/3 of the table is full, the table will be resized.&lt;/li>
&lt;li>When getting item from dictionary, both &lt;code>hash&lt;/code> and &lt;code>key&lt;/code> must be equal.&lt;/li>
&lt;/ol>
&lt;h2 id="resizing">Resizing&lt;/h2>
&lt;p>When elements size is below 50000, the table size will increase by a factor of 4 based on used slots. Otherwise, it will increase by a factor of 2. The dictionary size is always \(2^{n}\).&lt;/p></description></item><item><title>CSRF in Django</title><link>https://fromkk.com/posts/csrf-in-django/</link><pubDate>Wed, 07 Nov 2018 13:58:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/csrf-in-django/</guid><description>&lt;p>CSRF(Cross-site request forgery) is a way to generate fake user request to target website. For example, on a malicious website A, there is a button, click it will send request to &lt;a href="https://www.B.com/logout" target="_blank" rel="noopener noreffer ">www.B.com/logout&lt;/a>. When the user click this button, he will logout from website B unconsciously. Logout is not a big problem, but malicious website can generate more dangerous request like money transfer.&lt;/p>
&lt;h2 id="django-csrf-protection">Django CSRF protection&lt;/h2>
&lt;p>Each web framework has different approach to do CSRF protection. In Django, the validation process is below:&lt;/p></description></item></channel></rss>