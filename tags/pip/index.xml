<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pip on KK's Blog (fromkk)</title><link>https://fromkk.com/tags/pip/</link><description>Recent content in Pip on KK's Blog (fromkk)</description><generator>Hugo</generator><language>en</language><managingEditor>bebound@gmail.com (KK)</managingEditor><webMaster>bebound@gmail.com (KK)</webMaster><lastBuildDate>Mon, 28 Jul 2025 19:00:02 +0800</lastBuildDate><atom:link href="https://fromkk.com/tags/pip/index.xml" rel="self" type="application/rss+xml"/><item><title>Modern pip build process (â€“use-pep517)</title><link>https://fromkk.com/posts/modern-pip-build-process-use-pep517/</link><pubDate>Sun, 24 Nov 2024 20:49:00 +0800</pubDate><author>bebound@gmail.com (KK)</author><guid>https://fromkk.com/posts/modern-pip-build-process-use-pep517/</guid><description>&lt;p>Nowadays, &lt;code>pyproject.toml&lt;/code> becomes the standard configuration file for packaging. Compare with the old &lt;code>setup.py&lt;/code>, it adds two feature pep517 and pep518.&lt;/p>
&lt;p>&lt;a href="https://peps.python.org/pep-0517/" target="_blank" rel="noopener noreffer ">pep517&lt;/a> defines two hooks: &lt;code>build_wheel&lt;/code> and &lt;code>build_sdist&lt;/code>, which is required to build the package from source. Each build backend must implement these two hooks. It makes it possible to create other build backend such as &lt;code>flit&lt;/code> or &lt;code>poetry&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">build-system&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Defined by PEP 518:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">requires&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;flit&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Defined by this PEP:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">build-backend&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;local_backend&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">backend-path&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;backend&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Besides &lt;code>setuptools&lt;/code>, there are some other build back-end such as &lt;code>hatchling&lt;/code> and &lt;code>flit&lt;/code>. You can find the example here: &lt;a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-a-build-backend" target="_blank" rel="noopener noreffer ">Python Packaging Uer Guide - Choosing a build backend&lt;/a>&lt;/p></description></item></channel></rss>