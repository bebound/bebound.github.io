<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Machine Learning on KK's Blog (fromkk)</title><link>https://fromkk.com/tags/machine-learning/</link><description>Recent content in Machine Learning on KK's Blog (fromkk)</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 11 Jul 2024 14:33:38 +0800</lastBuildDate><atom:link href="https://fromkk.com/tags/machine-learning/index.xml" rel="self" type="application/rss+xml"/><item><title>Near-duplicate with SimHash</title><link>https://fromkk.com/posts/near-duplicate-with-simhash/</link><pubDate>Wed, 04 Dec 2019 00:16:00 +0800</pubDate><guid>https://fromkk.com/posts/near-duplicate-with-simhash/</guid><description>&lt;p>Before talking about &lt;strong>SimHash&lt;/strong>, let&amp;rsquo;s review some other methods which can also identify duplication.&lt;/p>
&lt;h2 id="longest-common-subsequence--lcs" class="relative group">Longest Common Subsequence(LCS) &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#longest-common-subsequence--lcs" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>This is the algorithm used by &lt;code>diff&lt;/code> command. It is also &lt;strong>edit distance&lt;/strong> with insertion and deletion as the only two edit operations.&lt;/p></description></item><item><title>The Annotated The Annotated Transformer</title><link>https://fromkk.com/posts/the-annotated-the-annotated-transformer/</link><pubDate>Sun, 01 Sep 2019 16:00:00 +0800</pubDate><guid>https://fromkk.com/posts/the-annotated-the-annotated-transformer/</guid><description>&lt;p>Thanks for the articles I list at the end of this post, I understand how transformers works. These posts are comprehensive, but there are some points that confused me.&lt;/p>
&lt;p>First, this is the graph that was referenced by almost all of the post related to Transformer.&lt;/p></description></item><item><title>Different types of Attention</title><link>https://fromkk.com/posts/different-types-of-attention/</link><pubDate>Mon, 15 Jul 2019 00:16:00 +0800</pubDate><guid>https://fromkk.com/posts/different-types-of-attention/</guid><description>&lt;p>\(s_t\) and \(h_i\) are source hidden states and target hidden state, the shape is &lt;code>(n,1)&lt;/code>. \(c_t\) is the final context vector, and \(\alpha_{t,s}\) is alignment score.&lt;/p>
&lt;p>\[\begin{aligned}
c_t&amp;amp;=\sum_{i=1}^n \alpha_{t,s}h_i \\
\alpha_{t,s}&amp;amp;= \frac{\exp(score(s_t,h_i))}{\sum_{i=1}^n \exp(score(s_t,h_i))}
\end{aligned}\]&lt;/p>
&lt;h2 id="global--soft--vs-local--hard" class="relative group">Global(Soft) VS Local(Hard) &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#global--soft--vs-local--hard" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>Global Attention takes all source hidden states into account, and local attention only use part of the source hidden states.&lt;/p></description></item><item><title>Using Dueling DQN to Play Flappy Bird</title><link>https://fromkk.com/posts/using-ddqn-to-play-flappy-bird/</link><pubDate>Sun, 14 Apr 2019 17:10:00 +0800</pubDate><guid>https://fromkk.com/posts/using-ddqn-to-play-flappy-bird/</guid><description>&lt;p>PyTorch provide a simple DQN implementation to solve the cartpole game. However, the code is incorrect, it diverges after training (It has been discussed &lt;a href="https://discuss.pytorch.org/t/dqn-example-from-pytorch-diverged/4123" target="_blank" rel="noreferrer">here&lt;/a>).&lt;/p>
&lt;p>The official code&amp;rsquo;s training data is below, it&amp;rsquo;s high score is about 50 and finally diverges.&lt;/p></description></item><item><title>TextCNN with PyTorch and Torchtext on Colab</title><link>https://fromkk.com/posts/textcnn-with-pytorch-and-torchtext-on-colab/</link><pubDate>Mon, 03 Dec 2018 15:47:00 +0800</pubDate><guid>https://fromkk.com/posts/textcnn-with-pytorch-and-torchtext-on-colab/</guid><description>&lt;p>&lt;a href="https://pytorch.org" target="_blank" rel="noreferrer">PyTorch&lt;/a> is a really powerful framework to build the machine learning models. Although some features is missing when compared with TensorFlow (For example, the early stop function, History to draw plot), its code style is more intuitive.&lt;/p>
&lt;p>&lt;a href="https://github.com/pytorch/text" target="_blank" rel="noreferrer">Torchtext&lt;/a> is a NLP package which is also made by &lt;code>pytorch&lt;/code> team. It provide a way to read text, processing and iterate the texts.&lt;/p></description></item><item><title>LSTM and GRU</title><link>https://fromkk.com/posts/lstm-and-gru/</link><pubDate>Sun, 22 Apr 2018 14:39:00 +0800</pubDate><guid>https://fromkk.com/posts/lstm-and-gru/</guid><description>&lt;h2 id="lstm" class="relative group">LSTM &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#lstm" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>The avoid the problem of vanishing gradient and exploding gradient in vanilla RNN, LSTM was published, which can remember information for longer periods of time.&lt;/p>
&lt;p>Here is the structure of LSTM:&lt;/p></description></item><item><title>Models and Architectures in Word2vec</title><link>https://fromkk.com/posts/models-and-architechtures-in-word2vec/</link><pubDate>Fri, 05 Jan 2018 15:14:00 +0800</pubDate><guid>https://fromkk.com/posts/models-and-architechtures-in-word2vec/</guid><description>&lt;p>Generally, &lt;code>word2vec&lt;/code> is a language model to predict the words probability based on the context. When build the model, it create word embedding for each word, and word embedding is widely used in many NLP tasks.&lt;/p>
&lt;h2 id="models" class="relative group">Models &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#models" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;h3 id="cbow--continuous-bag-of-words" class="relative group">CBOW (Continuous Bag of Words) &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#cbow--continuous-bag-of-words" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>Use the context to predict the probability of current word. (In the picture, the word is encoded with one-hot encoding, \(W_{V*N}\) is word embedding, and \(W_{V*N}^{&amp;rsquo;}\), the output weight matrix in hidden layer, is same as \(\hat{\upsilon}\) in following equations)&lt;/p></description></item><item><title>Semi-supervised text classification using doc2vec and label spreading</title><link>https://fromkk.com/posts/semi-supervised-text-classification-using-doc2vec-and-label-spreading/</link><pubDate>Sun, 10 Sep 2017 15:29:00 +0800</pubDate><guid>https://fromkk.com/posts/semi-supervised-text-classification-using-doc2vec-and-label-spreading/</guid><description>&lt;p>Here is a simple way to classify text without much human effort and get a impressive performance.&lt;/p>
&lt;p>It can be divided into two steps:&lt;/p>
&lt;ol>
&lt;li>Get train data by using keyword classification&lt;/li>
&lt;li>Generate a more accurate classification model by using doc2vec and label spreading&lt;/li>
&lt;/ol>
&lt;h2 id="keyword-based-classification" class="relative group">Keyword-based Classification &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#keyword-based-classification" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>Keyword based classification is a simple but effective method. Extracting the target keyword is a monotonous work. I use this method to automatic extract keyword candidate.&lt;/p></description></item><item><title>Parameters in doc2vec</title><link>https://fromkk.com/posts/parameters-in-dov2vec/</link><pubDate>Thu, 03 Aug 2017 15:20:00 +0800</pubDate><guid>https://fromkk.com/posts/parameters-in-dov2vec/</guid><description>&lt;p>Here are some parameter in &lt;code>gensim&lt;/code>&amp;rsquo;s &lt;code>doc2vec&lt;/code> class.&lt;/p>
&lt;h3 id="window" class="relative group">window &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#window" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>window is the maximum distance between the predicted word and context words used for prediction within a document. It will look behind and ahead.&lt;/p></description></item><item><title>Brief Introduction of Label Propagation Algorithm</title><link>https://fromkk.com/posts/brief-introduction-of-label-propagation-algorithm/</link><pubDate>Sun, 16 Jul 2017 21:45:00 +0800</pubDate><guid>https://fromkk.com/posts/brief-introduction-of-label-propagation-algorithm/</guid><description>&lt;p>As I said before, I&amp;rsquo;m working on a text classification project. I use &lt;code>doc2vec&lt;/code> to convert text into vectors, then I use LPA to classify the vectors.&lt;/p>
&lt;p>LPA is a simple, effective semi-supervised algorithm. It can use the density of unlabeled data to find a hyperplane to split the data.&lt;/p></description></item></channel></rss>