<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SimHash on KK's Blog (fromkk)</title><link>https://www.fromkk.com/tags/simhash/</link><description>Recent content in SimHash on KK's Blog (fromkk)</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Wed, 04 Dec 2019 00:16:00 +0800</lastBuildDate><atom:link href="https://www.fromkk.com/tags/simhash/index.xml" rel="self" type="application/rss+xml"/><item><title>Near-duplicate with SimHash</title><link>https://www.fromkk.com/posts/near-duplicate-with-simhash/</link><pubDate>Wed, 04 Dec 2019 00:16:00 +0800</pubDate><guid>https://www.fromkk.com/posts/near-duplicate-with-simhash/</guid><description>Before talking about SimHash, let&amp;rsquo;s review some other methods which can also identify duplication.
Longest Common Subsequence(LCS) This is the algorithm used by diff command. It is also edit distance with insertion and deletion as the only two edit operations.
This works good for short strings. However, the algorithm&amp;rsquo;s time complexity is \(O(m*n)\), if two strings&amp;rsquo; lengths are \(m\) and \(n\) respectively. So it&amp;rsquo;s not suitable for large corpus. Also, if two corpus consists of same paragraph but the order is not same.</description></item></channel></rss>