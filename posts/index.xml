<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - KK's Blog (fromkk)</title><link>https://fromkk.com/posts/</link><description>All Posts | KK's Blog (fromkk)</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>bebound@gmail.com (KK)</managingEditor><webMaster>bebound@gmail.com (KK)</webMaster><lastBuildDate>Sun, 10 Aug 2025 18:04:00 +0800</lastBuildDate><atom:link href="https://fromkk.com/posts/" rel="self" type="application/rss+xml"/><item><title>Namespace Package in Python</title><link>https://fromkk.com/posts/namespace-package-in-python/</link><pubDate>Sun, 10 Aug 2025 18:04:00 +0800</pubDate><author>KK</author><guid>https://fromkk.com/posts/namespace-package-in-python/</guid><description><![CDATA[<p>Recently, there is a <a href="https://github.com/Azure/azure-cli/issues/31843#issuecomment-3125269740" target="_blank" rel="noopener noreffer ">GitHub issue</a> about namespace package in Azure CLI. I think it is a good time to write down the knowledge about namespace package.</p>
<h2 id="what-is-namespace-package">What is Namespace Package</h2>
<p>If several packages share the same root folder, then the root folder is a namespace package. <code>subpackageA</code> and <code>subpackageb</code> can be installed separately, even in different Python path, but they can be imported as importing a single package: <code>import root</code>.</p>]]></description></item><item><title>Run Synology in QNAP NAS with PVE</title><link>https://fromkk.com/posts/run-synology-in-qnap-nas-with-pve/</link><pubDate>Sun, 29 Jun 2025 20:53:00 +0800</pubDate><author>KK</author><guid>https://fromkk.com/posts/run-synology-in-qnap-nas-with-pve/</guid><description><![CDATA[<p>Three years ago, I bought a QNAP TS-453Dmini NAS. Although it has a slow WEB UI and slow restart, it still fits my needs as all of the applications I need are running in Docker.</p>
<p>Recently, I want to move some files from my Mac to NAS to save space. I need a application behave like Dropbox, which can show all the files in the NAS and only download the files I need. I have tried the QSync, but it does not have thumbnails for cloud image and it does not have icons to show the file status. I also tried the <a href="https://www.seafile.com/home/" target="_blank" rel="noopener noreffer ">Seafile</a>, it&rsquo;s a powerful application, which requires 4G RAM to run, and there is bug in the thumbnail. I used to have a Synology ARM NAS, the Synology Drive has all the features I need, so I want to run it on my QNAP NAS. After some research, I managed to run Synology and QNAP together on my NAS. Here is the guide.</p>]]></description></item><item><title>Modern pip build process (–use-pep517)</title><link>https://fromkk.com/posts/modern-pip-build-process-use-pep517/</link><pubDate>Sun, 24 Nov 2024 20:49:00 +0800</pubDate><author>KK</author><guid>https://fromkk.com/posts/modern-pip-build-process-use-pep517/</guid><description><![CDATA[<p>Nowadays, <code>pyproject.toml</code> becomes the standard configuration file for packaging. Compare with the old <code>setup.py</code>, it adds two feature pep517 and pep518.</p>
<p><a href="https://peps.python.org/pep-0517/" target="_blank" rel="noopener noreffer ">pep517</a> defines two hooks: <code>build_wheel</code> and <code>build_sdist</code>, which is required to build the package from source. Each build backend must implement these two hooks. It makes it possible to create other build backend such as <code>flit</code> or <code>poetry</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">build-system</span>]
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Defined by PEP 518:</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">requires</span> = [<span style="color:#e6db74">&#34;flit&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Defined by this PEP:</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">build-backend</span> = <span style="color:#e6db74">&#34;local_backend&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">backend-path</span> = [<span style="color:#e6db74">&#34;backend&#34;</span>]
</span></span></code></pre></div><p>Besides <code>setuptools</code>, there are some other build back-end such as <code>hatchling</code> and <code>flit</code>. You can find the example here: <a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-a-build-backend" target="_blank" rel="noopener noreffer ">Python Packaging Uer Guide - Choosing a build backend</a></p>]]></description></item><item><title>sys.path in Python</title><link>https://fromkk.com/posts/sys-dot-path-in-python/</link><pubDate>Sun, 11 Aug 2024 15:56:00 +0800</pubDate><author>KK</author><guid>https://fromkk.com/posts/sys-dot-path-in-python/</guid><description><![CDATA[<p>Here is the process how <code>sys.path</code> is set in Python, with some parts omitted.</p>
<h2 id="python-command-line-arguments">Python Command Line Arguments</h2>
<p>By default, as initialized upon program startup, a potentially unsafe path is prepended to <code>sys.path</code>:</p>
<p><code>python -m</code>: prepend the current working directory.</p>
<p><code>python script.py</code>: prepend the script’s directory. If it’s a symbolic link, resolve symbolic links.</p>
<p><code>python -c</code> and python (REPL): prepend an empty string, which means the current working directory.</p>
<p>You can remove these path with <code>-P</code> param.</p>]]></description></item><item><title>__import__ in Python</title><link>https://fromkk.com/posts/import-in-python/</link><pubDate>Sun, 07 Apr 2024 15:58:00 +0800</pubDate><author>KK</author><guid>https://fromkk.com/posts/import-in-python/</guid><description><![CDATA[<p>It&rsquo;s known that Python&rsquo;s <code>import</code> statement is implemented by <code>__import__</code> function. In general, if we want to import a module dynamically, we can use <code>import_module</code> function, which is a wrapper around <code>__import__</code>.</p>
<blockquote>
<p>The most important difference between these two functions is that import_module() returns the specified package or module (e.g. pkg.mod), while <strong>import</strong>() returns the top-level package or module (e.g. pkg). &ndash; <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" target="_blank" rel="noopener noreffer ">https://docs.python.org/3/library/importlib.html#importlib.import_module</a></p></blockquote>
<p><code>import itertools</code> and <code>from requests import exceptions</code> can be translated to:</p>]]></description></item><item><title>Improve Git speed in WSL</title><link>https://fromkk.com/posts/speed-up-git-speed-in-wsl/</link><pubDate>Tue, 26 Dec 2023 11:16:00 +0800</pubDate><author>KK</author><guid>https://fromkk.com/posts/speed-up-git-speed-in-wsl/</guid><description><![CDATA[<p>The disk performance in WSL2 is poor, it takes a long time to run <code>git status</code> in a host&rsquo;s repo. Moreover, if you set a fancy shell prompt, it will take a long time to show the prompt. This article will introduce how to speed up Git in WSL2.</p>
<h2 id="how-to-speed-up-git-command">How to speed up Git Command</h2>
<p>The performance of file system in WSL2 is poor, it takes a long time to run <code>git status</code> in a host&rsquo;s repo. The solution is to use <code>git.exe</code> in Windows folder. You can add this into your <code>bashrc</code>:</p>]]></description></item><item><title>iPod Video Review</title><link>https://fromkk.com/posts/ipod-video-review/</link><pubDate>Tue, 26 Dec 2023 11:16:00 +0800</pubDate><author>KK</author><guid>https://fromkk.com/posts/ipod-video-review/</guid><description><![CDATA[<p>I bought a iPod Video 5.5th Gen 80G recently. It&rsquo;s only 200 Yuan (about $30) and I&rsquo;m satisfied with it.</p>
<h2 id="rockbox">Rockbox</h2>
<p>The original firmware supports few audio format, it even can&rsquo;t play FLAC. I install rockbox on it, which support FLAC and other format and I can transfer music without using iTunes or Finder. It also support theme and plugin, which makes it more powerful.</p>
<h3 id="macpod-error">MacPod error</h3>
<p>If you restore the iPod on macOS, it raises <code>Warning: This is a MacPod, Rockbox only runs on WinPods. See http://www.rockbox.org/wiki/IpodConversionToFAT32</code> during installation. The easiest way to fix this is to restore it on Windows.</p>]]></description></item><item><title>Python 3.11 changes</title><link>https://fromkk.com/posts/python-3-dot-11-changes/</link><pubDate>Sun, 10 Dec 2023 15:24:00 +0800</pubDate><author>KK</author><guid>https://fromkk.com/posts/python-3-dot-11-changes/</guid><description><![CDATA[<p>In <a href="https://github.com/Azure/azure-cli/pull/26923" target="_blank" rel="noopener noreffer ">[Packaging] Support Python 3.11 by bebound · Pull Request #26923 · Azure/azure-cli (github.com)</a> , I bumped azure-cli to use Python 3.11. We&rsquo;ve bump the dependency in other PRs, I thought it should be a small PR, but in the end, a lot of changes are made.</p>
<h2 id="args-dot-getargspec"><code>args.getargspec</code></h2>
<p><code>getargspec</code> is dropped in 3.11. You can easily replaced it with <a href="https://docs.python.org/3/library/inspect.html#inspect.getfullargspec" target="_blank" rel="noopener noreffer "><code>getfullargspec</code></a> . It returns <code>FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)</code> instead of <code>ArgSpec(args, varargs, keywords, defaults)</code> So <code>args, _, kw, _ = inspect.getargspec(fn)</code> can be replaced by <code>args, _, kw, *_ = inspect.getfullargspec(fn)</code> However, <code>getfullargspec</code> is retained primarily for use in code that needs to maintain compatibility with the Python 2 <code>inspect</code> module API.</p>]]></description></item><item><title>Line Ending in Git</title><link>https://fromkk.com/posts/line-ending-in-git/</link><pubDate>Sat, 21 Oct 2023 15:40:00 +0800</pubDate><author>KK</author><guid>https://fromkk.com/posts/line-ending-in-git/</guid><description><![CDATA[<p>When working on a project with multiple developers, the line ending can be troublesome. This article will explain how to configure line ending in Git.</p>
<h2 id="basic-configuration">Basic configuration</h2>
<p>The line ending on Windows is <code>CRLF</code>, on Linux is <code>LF</code>. To prevent the line ending issue, we can set <code>core.autocrlf</code> to <code>true</code> on Windows to let git convert <code>CRLF</code> to <code>LF</code> when commit, and convert <code>LF</code> to <code>CRLF</code> when checkout. It is automatically configured if you install git on Windows.</p>]]></description></item><item><title>How to copy files temporarily in Dockerfile</title><link>https://fromkk.com/posts/how-to-copy-files-temporarily-in-dockerfile/</link><pubDate>Thu, 24 Aug 2023 11:49:00 +0800</pubDate><author>KK</author><guid>https://fromkk.com/posts/how-to-copy-files-temporarily-in-dockerfile/</guid><description><![CDATA[<p>It&rsquo;s very common to copy a local file into the container when build docker image. In general, we use <code>COPY</code> command. But it creates a new layer and increase the final image size. If this is a temporal file and we don&rsquo;t want users waste their storage space, how can we remove it? Here are some approaches.</p>
<h2 id="download-the-file-dynamically">Download the File Dynamically</h2>
<p>If the file can be download from URL or you can create a local HTTP server to share the file, you can download the file, use it and delete it in one <code>RUN</code> command. For example:</p>]]></description></item></channel></rss>