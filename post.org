#+STARTUP: content
#+AUTHOR: KK
#+HUGO_BASE_DIR: ./
#+hugo_auto_set_lastmod: t
#+STARTUP: latexpreview

* Posts
  :PROPERTIES:
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
  :EXPORT_HUGO_SECTION: post
  :END:
** Machine Learning                                       :Machine__Learning:
*** DONE Brief Introduction of Label Propagation Algorithm :Label__Propagation:
CLOSED: [2017-07-16 Sun 21:45]
   :PROPERTIES:
   :EXPORT_FILE_NAME: brief-introduction-of-label-propagation-algorithm
   :END:
As I said before, I'm working on a text classification project. I use =doc2vec= to convert text into vectors, then I use LPA to classify the vectors.

LPA is a simple, effective semi-supervised algorithm. It can use the density of unlabeled data to find a hyperplane to split the data.

Here are the main stop of the algorithm:

0. Let $ (x_1,y1)...(x_l,y_l)$ be labeled data, $Y_L = \{y_1...y_l\} $ are the class labels. Let $(x_{l+1},y_{l+u})$ be unlabeled data where $Y_U = \{y_{l+1}...y_{l+u}\}$ are unobserved, usually $l \ll u$. Let $X=\{x_1...x_{l+u}\}$ where $x_i\in R^D$. The problem is to estimate $Y_U$ for $X$ and $Y_L$.
1. Calculate the similarity of the data points. The most simple metric is Euclidean distance. Use a parameter $\sigma$ to control the weights.

$$w_{ij}= exp(-\frac{d^2_{ij}}{\sigma^2})=exp(-\frac{\sum^D_{d=1}{(x^d_i-x^d_j})^2}{\sigma^2})$$

Larger weight allow labels to travel through easier.

2. Define a $(l+u)*(l+u)$ probabilistic transition matrix $T$


$$T_{ij}=P(j \rightarrow i)=\frac{w_{ij}}{\sum^{l+u}_{k=1}w_{kj}}$$


$T_{ij}$ is the probability to jump from node $j$ to $i$. If there are $C$ classes, we can define a $(l+u)*C$ label matrix $Y$, to represent the probability of a label belong to class $c$. The initialization of unlabeled data points is not important.


3. Propagate $Y \leftarrow TY$
4. Row-normalize Y.
5. Reset labeled data's Y. Repeat 3 until Y converges.

In short, let the nearest label has larger weight, then calculate each label's new label, reset labeled data's label, repeat.
#+attr_html: :width 400
[[file:/images/label_spreading.png]]

Ref:

1. [[http://mlg.eng.cam.ac.uk/zoubin/papers/CMU-CALD-02-107.pdf][Learning from Labeled and Unlabeled Data with Label Propagation]]
2. [[http://blog.csdn.net/zouxy09/article/details/49105265][标签传播算法（Label Propagation）及Python实现]]

*** DONE LSTM and GRU                                               :LSTM:GRU:
CLOSED: [2018-04-22 Sun 14:39]
   :PROPERTIES:
   :EXPORT_FILE_NAME: lstm-and-gru
   :END:
**** LSTM

The avoid the problem of vanishing gradient and exploding gradient in vanilla RNN, LSTM was published, which can remember information for longer periods of time.

Here is the structure of LSTM:

#+attr_html: :width 400
[[file:/images/LSTM_LSTM.png]]

The calculate procedure are:

$$\begin{aligned}
f_t&=\sigma(W_f\cdot[h_{t-1},x_t]+b_f)\\
i_t&=\sigma(W_i\cdot[h_{t-1},x_t]+b_i)\\
o_t&=\sigma(W_o\cdot[h_{t-1},x_t]+b_o)\\
\tilde{C_t}&=tanh(W_C\cdot[h_{t-1},x_t]+b_C)\\
C_t&=f_t\ast C_{t-1}+i_t\ast \tilde{C_t}\\
h_t&=o_t \ast tanh(C_t)
\end{aligned}$$

$f_t$,$i_t$,$o_t$ are forget gate, input gate and output gate respectively. $\tilde{C_t}$ is the new memory content. $C_t$ is cell state. $h_t$ is the output. 

Use $f_t$ and $i_t$ to update $C_t$, use $o_t$ to decide which part of hidden state should be outputted.

**** GRU

#+attr_html: :width 400
[[file:/images/LSTM_GRU.png]]

$$\begin{aligned}
z_t&=\sigma(W_z\cdot[h_{t-1},x_t])\\
r_t&=\sigma(W_r\cdot[h_{t-1},x_t])\\
\tilde{h_t}&=tanh(W\cdot[r_t \ast h_{t-1},x_t])\\
h_t&=(1-z_t)\ast h_{t-1}+z_t \ast \tilde{h_t}
\end{aligned}$$

$z_t$ is update gate, $r_t$ is reset gate, $\tilde{h_t}$ is candidate activation, $h_t$ is activation.

Compare with LSTM, GRU merge cell state and hidden state to one hidden state, and use $z_t$ to decide how to update the state rather than $f_t$ and $i_t$.

Ref:
1. [[http://colah.github.io/posts/2015-08-Understanding-LSTMs/][Understanding LSTM Networks]]

*** DONE Models and Architectures in Word2vec                       :word2vec:
CLOSED: [2018-01-05 Fri 15:14]
   :PROPERTIES:
   :EXPORT_FILE_NAME: models-and-architechtures-in-word2vec
   :END:
**** Models
***** CBOW (Continuous Bag of Words)

Use the context to predict the probability of current word.
#+attr_html: :width 400
[[file:/images/doc2vec_cbow.png]]

1. Context words' vectors are $\upsilon_{c-n} ... \upsilon_{c+m}$ ($m$ is the window size)
2. Context vector $\hat{\upsilon}=\frac{\upsilon_{c-m}+\upsilon_{c-m+1}+...+\upsilon_{c+m}}{2m}$
3. Score vector $z_i = u_i\hat{\upsilon}$, where $u_i$ is the output vector representation of word $\omega_i$
4. Turn scores into probabilities $\hat{y}=softmax(z)$
5. We desire probabilities $\hat{y}$ match the true probabilities $y$.

We use cross entropy $H(\hat{y},y)$ to measure the distance between these two distributions.
$$H(\hat{y},y)=-\sum_{j=1}^{\lvert V \rvert}{y_j\log(\hat{y}_j)}$$

$y$ and $\hat{y}$ is accurate, so the loss simplifies to:
$$H(\hat{y},y)=-y_j\log(\hat{y})$$

For perfect prediction, $H(\hat{y},y)=-1\log(1)=0$

According to this, we can create this loss function:

$$\begin{aligned}
minimize\ J &=-\log P(\omega_c\lvert \omega_{c-m},...,\omega_{c-1},...,\omega_{c+m}) \\
&= -\log P(u_c \lvert \hat{\upsilon}) \\
&= -\log \frac{\exp(u_c^T\hat{\upsilon})}{\sum_{j=1}^{\lvert V \rvert}\exp (u_j^T\hat{\upsilon})} \\
&= -u_c^T\hat{\upsilon}+\log \sum_{j=1}^{\lvert V \rvert}\exp (u_j^T\hat{\upsilon})
\end{aligned}$$

***** Skip-Gram

Use current word to predict its context.

#+attr_html: :width 400
[[file:/images/doc2vec_skip-gram.png]]


1. We get the input word's vector $\upsilon_c$
2. Generate $2m$ score vectors, $u_{c-m},...,u_{c-1},...,u_{c+m}$.
3. Turn scores into probabilities $\hat{y}=softmax(u)$
4. We desire probabilities $\hat{y}$ match the true probabilities $y$.

$$\begin{aligned}
minimize J &=-\log P(\omega_{c-m},...,\omega_{c-1},\omega_{c+1},...\omega_{c+m}\lvert \omega_c)\\
&=-\log \prod_{j=0,j\ne m}^{2m}P(\omega_{c-m+j}\lvert \omega_c)\\
&=-\log \prod_{j=0,j\ne m}^{2m}P(u_{c-m+j}\lvert \upsilon_c)\\
&=-\log \prod_{j=0,j\ne m}^{2m}\frac{\exp (u^T_{c-m+j}\upsilon_c)}{\sum_{k=1}^{\lvert V \rvert}{\exp (u^T_k \upsilon_c)}}\\
&=-\sum_{j=0,j\ne m}^{2m}{u^T_{c-m+j}\upsilon_c+2m\log \sum_{k=1}^{\lvert V \rvert} \exp(u^T_k \upsilon_c)}
\end{aligned}$$

**** Architectures

Minimize $J$ is expensive, as the summation is over $\lvert V \rvert$. There are two ways to reduce the computation. Hierarchical Softmax and Negative Sampling.

***** Hierarchical Softmax

Encode words into a huffman tree, then each word has a Huffman code. The probability of it's probability $P(w\lvert Context(\omega))$ can change to choose the right path from root the the leaf node, each node is a binary classification. Suppose code $0$ is a positive label, $1$ is negative label. If the probability of a positive classification is 
$$\sigma(X^T_\omega \theta)=\frac{1}{1+e^{-X^T_\omega}}$$

Then the probability of negative classification is
$$1-\sigma(X^T_\omega \theta)$$
#+attr_html: :width 400
[[file:/images/doc2vec_hierarchical_softmax.png]]
足球's Huffman code is $1001$, then it's probability in each node are

$$\begin{aligned}
p(d_2^\omega\lvert X_\omega,\theta^\omega_1&=1-\sigma(X^T_\omega \theta^\omega_1))\\
p(d^\omega_3\lvert X_\omega,\theta^\omega_2&=\sigma(X^T_\omega \theta^\omega_2))\\
p(d^\omega_4\lvert X_\omega,\theta^\omega_3&=\sigma(X^T_\omega \theta^\omega_3))\\
p(d^\omega_5\lvert X_\omega,\theta^\omega_4&=1-\sigma(X^T_\omega \theta^\omega_4))\\
\end{aligned}$$

where $\theta$ is parameter in the node.

The probability of the =足球= is the production of these equation.

Generally,

$$p(\omega\lvert Context(\omega))=\prod_{j=2}^{l\omega}p(d^\omega_j\lvert X_\omega,\theta^\omega_{j-1})$$

***** Negative Sampling

Choose some negative sample, add the probability of the negative word into loss function. Maximize the positive words' probability and minimize the negative words' probability.

Let $P(D=0 \lvert \omega,c)$ be the probability that $(\omega,c)$ did not come from the corpus data. Then the objective function will be

$$\theta = \text{argmax} \prod_{(\omega,c)\in D} P(D=1\lvert \omega,c,\theta) \prod_{(\omega,c)\in \tilde{D}} P(D=0\lvert \omega,c,\theta)$$

where $\theta$ is the parameters of the model($\upsilon$ and $u$).

Ref:

- [word2vec原理推导与代码分析](http://www.hankcs.com/nlp/word2vec.html)
- [CS 224D: Deep Learning for NLP Lecture Notes: Part I](http://cs224d.stanford.edu/lecture_notes/notes1.pdf)
- [word2vec 中的数学原理详解（一）目录和前言](http://blog.csdn.net/itplus/article/details/37969519)

*** DONE Parameters in dov2vec                                      :doc2vec:
CLOSED: [2017-08-03 Thu 15:20]
   :PROPERTIES:
   :EXPORT_FILE_NAME: parameters-in-dov2vec
   :END:
Here are some parameter in =gensim='s =doc2vec= class.
***** window
window is the maximum distance between the predicted word and context words used for prediction within a document. It will look behind and ahead.

In =skip-gram= model, if the window size is 2, the training samples will be this:(the blue word is the input word)

#+attr_html: :width 400
[[file:/images/doc2vec_window.png]]

***** min_count
If the word appears less than this value, it will be skipped

***** sample
High frequency word like =the= is useless for training. =sample= is a threshold for deleting these higher-frequency words. The probability of keeping the word $w_i$ is:

$$P(w_i) = (\sqrt{\frac{z(\omega_i)}{s}} + 1) \cdot \frac{s}{z(\omega_i)}$$

where $z(w_i)$ is the frequency of the word and $s$ is the sample rate.

This is the plot when =sample= is 1e-3.

#+attr_html: :width 400
[[file:/images/doc2vec_negative_sample.png]]

***** negative
Usually, when training a neural network, for each training sample, all of the weights in the neural network need to be tweaked. For example, if the word pair is ('fox', 'quick'), then only the word quick's neurons should output 1, and all of the other word neurons should output 0.

But it would takes a lot of time to do this when we have billions of training samples. So, instead of update all of the weight, we random choose a small number of "negative" words (default value is 5) to update the weight.(Update their wight to output 0).

So when dealing with word pair ('fox','quick'), we update quick's weight to output 1, and other 5 random words' weight to output 1.

The probability of selecting word $\omega_i$ is $P(\omega_i)$:

$$P(\omega_i)=\frac{{f(\omega_i)}^{{3}/{4}}}{\sum_{j=0}^{n}\left({f(\omega_j)}^{{3}/{4}}\right)}$$


$f(\omega_j)$ is the frequency of word $\omega_j$.

Ref:

- [Word2Vec Tutorial - The Skip-Gram Model](http://mccormickml.com/2016/04/19/word2vec-tutorial-the-skip-gram-model/)
- [Word2Vec Tutorial Part 2 - Negative Sampling](http://mccormickml.com/2017/01/11/word2vec-tutorial-part-2-negative-sampling/)

*** DONE Semi-supervised text classification using doc2vec and label spreading :doc2vec:
CLOSED: [2017-09-10 Sun 15:29]
   :PROPERTIES:
   :EXPORT_FILE_NAME: semi-supervised-text-classification-using-doc2vec-and-label-spreading
   :END:
Here is a simple way to classify text without much human effort and get a impressive performance.

It can be divided into two steps:

1. Get train data by using keyword classification
2. Generate a more accurate classification model by using doc2vec and label spreading

***** Keyword-based Classification
Keyword based classification is a simple but effective method. Extracting the target keyword is a monotonous work. I use this method to automatic extract keyword candidate.


1. Find some most common words to classify the text.
2. Use this equation to calculate the score of each word appears in the text.
   $$ score(i) = \frac{count(i)}{all_{count(i)}^{0.3}}$$
   which $all_{count(i)}$ is the word $i$'s word count in all corpus, and $count(i)$ is the word $i$'s word count in positive corpus.
3. Check the top words, add it to the final keyword list. Repeat this process.

Finally, we can use the keywords to classify the text and get the train data. 

***** Classification by =doc2vec= and Label Spreading
Keyword-based classification sometimes produces the wrong result, as it can't using the semantic information in the text. Fortunately, Google has open sourced =word2vec=, which can be used to produce semantically meaningful word embeddings. Furthermore, sentences can also be converted to vectors by using =doc2vec=. Sentences which has closed meaning also have short vector distance.

So the problem is how to classify these vectors.

1. Using corpus to train the =doc2vec= model.
2. Using =doc2vec= model to convert sentence into vector.
3. Using label spreading algorithm to train a classify model to classify the vectors.

*** DONE TextCNN with PyTorch and Torchtext on Colab                :TextCNN:
CLOSED: [2018-12-03 Mon 15:47]
   :PROPERTIES:
   :EXPORT_FILE_NAME: textcnn-with-pytorch-and-torchtext-on-colab
   :END:
[[https://pytorch.org][PyTorch]] is a really powerful framework to build the machine learning models. Although some features is missing when compared with TensorFlow (For example, the early stop function, History to draw plot), its code style is more intuitive. 

[[https://github.com/pytorch/text][Torchtext]] is a NLP package which is also made by =pytorch= team. It provide a way to read text, processing and iterate the texts.

[[https://colab.research.google.com][Google Colab]] is a Jupyter notebook environment host by Google, you can use free GPU and TPU to run your modal.

Here is a simple tuturial to build a TextCNN modal and run it on Colab.

The [[https://arxiv.org/abs/1408.5882][TextCNN paper]] was published by Kim in 2014. The model's idea is pretty simple, but the performance is impressive. If you trying to solve the text classificaton problem, this model is a good choice to start with.

The main architecture is shown below:

#+attr_html: :width 400
[[file:/images/textcnn.png]]

It uses different kernels to extract text features, then use the softmax regression to classify text base on the features.

Now we can build this model step by step.

First build the model. The model I use is CNN-multichannel, which contains two sets of word embedding. Both of them is the copy of word embedding generate from corpus, but only one set will update embedding during training.

The code is below:
#+BEGIN_SRC python
class textCNNMulti(nn.Module):
    def __init__(self,args):
        super().__init__()
        dim = args['dim']
        n_class = args['n_class']
        embedding_matrix=args['embedding_matrix']
        kernels=[3,4,5]
        kernel_number=[150,150,150]
        self.static_embed = nn.Embedding.from_pretrained(embedding_matrix)
        self.non_static_embed = nn.Embedding.from_pretrained(embedding_matrix, freeze=False)
        self.convs = nn.ModuleList([nn.Conv2d(2, number, (size, dim),padding=(size-1,0)) for (size,number) in zip(kernels,kernel_number)])
        self.dropout=nn.Dropout()
        self.out = nn.Linear(sum(kernel_number), n_class)
 
    def forward(self, x):
        non_static_input = self.non_static_embed(x)
        static_input = self.static_embed(x)
        x = torch.stack([non_static_input, static_input], dim=1)
        x = [F.relu(conv(x)).squeeze(3) for conv in self.convs]
        x = [F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]
        x = torch.cat(x, 1)
        x = self.dropout(x)
        x = self.out(x)
        return x
#+END_SRC

Second, convert text into word index, so each sentence become a vector for training.

#+BEGIN_SRC python

TEXT = data.Field(lower=True,batch_first=True)
LABEL = data.Field(sequential=False)

train, val, test = datasets.SST.splits(TEXT, LABEL, 'data/',fine_grained=True)

TEXT.build_vocab(train, vectors="glove.840B.300d")
LABEL.build_vocab(train,val,test)

train_iter, val_iter, test_iter = data.BucketIterator.splits(
    (train, val, test), batch_sizes=(128, 256, 256),shuffle=True)

#+END_SRC

=Field= defines how to process text, here is the most common parameters:

#+BEGIN_QUOTE
sequential – Whether the datatype represents sequential data. If False, no tokenization is applied. Default: True.

use_vocab – Whether to use a Vocab object. If False, the data in this field should already be numerical. Default: True.

preprocessing – The Pipeline that will be applied to examples using this field after tokenizing but before numericalizing. Many Datasets replace this attribute with a custom preprocessor. Default: None.

batch_first – Whether to produce tensors with the batch dimension first. Default: False.
#+END_QUOTE

=datasets.SST.splits= will load the =SST= datasets, and split into train, validation, and test Dataset objects.

=build_vocab= will create the Vocab object for Field, which contains the information to convert word into word index and vice versa. Also, the word embedding will save as =Field.Vocab.vectors=. =vectors= contains all of the word embedding. Torchtext can download some pretrained vectors automatically, such as =glove.840B.300d=, =fasttext.en.300d=. You can also load your vectors in this way, =xxx.vec= should be the standard word2vec format.
#+BEGIN_SRC python
from torchtext.vocab import Vectors

vectors = Vectors(name='xxx.vec', cache='./')
TEXT.build_vocab(train, val, test, vectors=vectors)
#+END_SRC

=data.BucketIterator.splits= will returns iterators that loads batches of data from datasets, and the text in same batch has similar lengths.


Now, we can start to train the model. First we wrap some parameters into =args=, it contains settings like output class, learning rate, log interval and so on.

#+BEGIN_SRC python
args={}
args['vocb_size']=len(TEXT.vocab)
args['dim']=300
args['n_class']=len(LABEL.vocab)-1
args['embedding_matrix']=TEXT.vocab.vectors
args['lr']=0.001
args['momentum']=0.8
args['epochs']=180
args['log_interval']=100
args['test_interval']=500
args['save_dir']='./'
#+END_SRC


Finally, we can train the model.

#+BEGIN_SRC python
  model=textCNNMulti(args)
  model.cuda()
  optimizer = torch.optim.SGD(model.parameters(), lr=args['lr'],momentum=args['momentum'])
  criterion = nn.CrossEntropyLoss()
  steps=0
  for epoch in range(1, args['epochs']+1):
      for i,data in enumerate(train_iter):
          steps+=1

          x, target = data.text, data.label
          x=x.cuda()

          target.sub_(1)
          target=target.cuda()

          output = model(x)
          loss = criterion(output, target)
          optimizer.zero_grad()
          loss.backward()
          optimizer.step()
#+END_SRC

You can found =textcnn.ipynb= [[https://github.com/bebound/textcnn][here]].


Ref:

1. [[https://arxiv.org/abs/1408.5882][Convolutional Neural Networks for Sentence Classiﬁcation]]
2. [[http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/][Understanding Convolutional Neural Networks for NLP]]
3. [[https://torchtext.readthedocs.io/en/latest/data.html][Torchtext Docs]]
4. [[https://github.com/castorini/Castor][Castor]]

*** DONE Using Dueling DQN to Play Flappy Bird
CLOSED: [2019-04-14 Sun 17:10]
   :PROPERTIES:
   :EXPORT_FILE_NAME: using-ddqn-to-play-flappy-bird
   :END:
PyTorch provide a simple DQN implementation to solve the cartpole game. However, the code is incorrect, it diverges after training (It has been discussed [[https://discuss.pytorch.org/t/dqn-example-from-pytorch-diverged/4123][here]]).

The official code's training data is below, it's high score is about 50 and finally diverges.

#+attr_html: :width 400
[[file:/images/ddqn_official.png]]

There are many reason that lead to divergence.

First it use the difference of two frame as input in the tutorial, not only it loss the cart's absolute information(This information is useful, as game will terminate if cart moves too far from centre), but also confused the agent when difference is the same but the state is varied.

Second, small replay memory. If the memory is too small, the agent will forget the strategy it has token in some state. I'm not sure whether =10000= memory is big enough, but I suggest using a higher value.

Third, the parameters. =learning_rate=, =target_update_interval= may cause fluctuation. Here is a example on [[https://stackoverflow.com/questions/49837204/performance-fluctuates-as-it-is-trained-with-dqn][stackoverflow]]. I also met this problem when training cartpole agent. The reward stops growing after 1000 episode.

#+attr_html: :width 400
[[file:/images/ddqn_cartpole_fluctuate.png]]

After doing some research on the cartpole DNQ code, I managed to made a model to play the flappy bird. Here are the changes from the original cartpole code. Most of the technology can be found in these two papers: [[https://arxiv.org/abs/1312.5602][Playing Atari with Deep Reinforcement Learning]] and [[https://arxiv.org/abs/1710.02298][Rainbow: Combining Improvements in Deep Reinforcement Learning]].

Here is the model architecture:
#+attr_html: :width 600
[[file:/images/ddqn_model.png]]

Here is a trained result:

{{% youtube "NV82ZUQynuQ"%}}


1. Dueling DQN
   
   The vanilla DQN has the overestimate problem. As the =max= function will accumulate the noise when training. This leads to converging at suboptimal point. Two following architectures are submitted to solve this problem. 
   
   $$ Q(s, a) = r + \gamma \max_{a'}[Q(s', a')] $$

   Double DQN was published two year later DQN. It has two value function, one is used to choose the action with max Q value, another one is used to calculate the Q value of this action.

   $$ a^{max}(S'_j, w) = \arg\max_{a'}Q(\phi(S'_j),a,w) $$

   $$ Q(s,a) = r + \gamma Q'(\phi(S'_j),a^{max}(S'_j, w),w') $$

   Dueling DQN is another solution. It has two estimator, one estimates the score of current state, another estimates the action score. 

   $$Q(s, a) = r + \gamma( \max_{a’}[A(s',a')+V(s')]$$

   In order to distinguish the score of the actions, the return the Q-value will minus the mean action score:

   =x=val+adv-adv.mean(1,keepdim=True)=
   
   #+attr_html: :width 400
   [[file:/images/ddqn_duel_dqn.png]]
   
   In this project, I use dueling DQN.

2. Image processing

   I grayscale and crop the image.

3. Stack frames
   
   I use the last 4 frame as the input. This should help the agent to know the change of environment.

4. Extra FC before last layer
   
   I add a FC between the image features and the FC for calculate Q-Value.

5. Frame Skipping
   
   Frame-skipping means agent sees and selects actions on every k frame instead of every frame, the last action is repeated on skipped frames. This method will accelerate the training procedure. In this project, I use =frame_skipping=2=, as the more the frame skipping is, the more the bird is likely to hit the pipe. And this method did help the agent to converge faster. More details can be found in this [[https://danieltakeshi.github.io/2016/11/25/frame-skipping-and-preprocessing-for-deep-q-networks-on-atari-2600-games/][post]].

6. Prioritized Experience Replay
   
   This idea was published [[https://arxiv.org/abs/1511.05952][here]]. It's a very simple idea: replay high TD error experience more frequently. My code implementation is not efficient. But in cartpole game, this technology help the agent converge faster. 

7. Colab and Kaggle Kernel
   
   My MacBook doesn't support CUDA, so I use these two website to train the model. Here are the comparison of them. During training, Kaggle seems more stable, Colab usually disconnected after 1h.

  |                      | Colab         | Kaggle Kernel   |
  | GPU                  | Tesla T4(16G) | Tesla P100(16G) |
  | RAM                  | 13G           | 13G             |
  | Max training time    | 12h           | 9h              |
  | Export trained model | Google Drive  | -               |

---

The lesson I learnt from this project is patience. It takes a long time(maybe hundreds of thousand steps) to see whether this model works, and there are so many parameters can effect the final performance. It takes me about 3 weeks to build the final model. So if you want to build your own model, be patient and good luck. Here are two articles talking about the debugging and hyperparameter tuning in DQN:
- [[https://adgefficiency.com/dqn-debugging/][DQN debugging using Open AI gym Cartpole]]
- [[https://adgefficiency.com/dqn-tuning/][DDQN hyperparameter tuning using Open AI gym Cartpole]]

 
  Here are something may help with this task.
- [[https://www.tensorflow.org/guide/summaries_and_tensorboard][TensorBoard]]

  It's a visualization tool made by TensorFlow Team. It's more convenient to use it rather than generate graph manually by matplotlib. Besides =reward= and =mean_q=, these variable are also useful when debugging: TD-error, loss and action_distribution, avg_priority.
  
- Advanced image pre-processing

  In this project, I just grayscalize the image. A more advance technology such as binarize should help agent to filter unimportant detail of game output.
  #+attr_html: :width 100 
  [[file:/images/ddqn_binary_preprocessing.png]]
  
  In [[https://sarvagyavaish.github.io/FlappyBirdRL/][Flappy Bird RL]], the author extract the vertical distance from lower pipe and horizontal distance from next pair of pipes as state. The trained agent can achieve 3000 score.
  
  #+attr_html: :width 200 
  [[file:/images/ddqn_extract_feature.png]]
  

- Other Improvements

  [[https://arxiv.org/abs/1710.02298][Rainbow]] introduce many other extensions to enhance DQN, some of them have been discussed in this post.
  #+attr_html: :width 400
  [[file:/images/ddqn_rainbow.png]]


I've uploaded code to this [[https://github.com/bebound/flappy-bird-dqn][repo]].

Ref:
1. [[https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html][PyTorch REINFORCEMENT LEARNING (DQN) TUTORIAL]]
2. [[https://www.cnblogs.com/pinard/category/1254674.html][强化学习]] (A series of Chinese post about reinforcement learning)
3. [[http://cs229.stanford.edu/proj2015/362_report.pdf][Deep Reinforcement Learning for Flappy Bird]]
4. [[https://github.com/ttaoREtw/Flappy-Bird-Double-DQN-Pytorch][Flappy-Bird-Double-DQN-Pytorch]]
5. [[https://github.com/qfettes/DeepRL-Tutorials][DeepRL-Tutorials]]
6. [[https://medium.com/mlreview/speeding-up-dqn-on-pytorch-solving-pong-in-30-minutes-81a1bd2dff55][Speeding up DQN on PyTorch: how to solve Pong in 30 minutes]]
7. [[https://danieltakeshi.github.io/2016/11/25/frame-skipping-and-preprocessing-for-deep-q-networks-on-atari-2600-games/][Frame Skipping and Pre-Processing for Deep Q-Networks on Atari 2600 Games]]
8. [[https://openai.com/blog/openai-baselines-dqn/][OpenAI Baselines: DQN]]
9. [[https://github.com/susantamoh84/Deep-Reinforcement-Learning-Hands-On/][Deep-Reinforcement-Learning-Hands-On]]
10. [[https://github.com/dennybritz/reinforcement-learning/issues/30][DQN solution results peak at ~35 reward]]

-----

- Update 19-04-26:

  Colab's GPU has upgrade to Tesla T4 from K80, now it becomes my best bet.

- Update 19-05-07

  TensorBoard is now natively supported in PyTorch after version 1.1

- Update 19-07-26

  If you run out of RAM in Colab, it will show up an option to double the RAM.
  
- Update 19-08-13

  Upload video, update code.

*** DONE Different types of Attention
CLOSED: [2019-07-15 Mon 00:16]
   :PROPERTIES:
   :EXPORT_FILE_NAME: different-types-of-attention
   :END:
$s_t$ and $h_i$ are source hidden states and target hidden state, the shape is =(n,1)=. $c_t$ is the final context vector, and $\alpha_{t,s}$ is alignment score.

$$\begin{aligned}
c_t&=\sum_{i=1}^n \alpha_{t,s}h_i \\
\alpha_{t,s}&= \frac{\exp(score(s_t,h_i))}{\sum_{i=1}^n \exp(score(s_t,h_i))}
\end{aligned}
$$

**** Global(Soft) VS Local(Hard)

Global Attention takes all source hidden states into account, and local attention only use part of the source hidden states.

**** Content-based VS Location-based

Content-based Attention uses both source hidden states and target hidden states, but location-based attention only use source hidden states.

Here are several popular attention mechanisms:


****** Dot-Product
$$score(s_t,h_i)=s_t^Th_i$$

****** Scaled Dot-Product
$$score(s_t,h_i)=\frac{s_t^Th_i}{\sqrt{n}}$$
where n is the vectors dimension. Google's Transformer model has similar scaling factor when calculate self-attention: $score=\frac{KQ^T}{\sqrt{n}}$

****** Location-Base

$$socre(s_t,h_i)=softmax(W_as_t)$$

****** General

$$score(s_t,h_i)=s_t^TW_ah_i$$

$Wa$'s shape is =(n,n)=

****** Concat

$$score(s_t,h_i)=v_a^Ttanh(W_a[s_t,h_i])$$

$v_a$'s shape is =(x,1)=, and $Wa$ 's shape is =(x,x)=. This is similar to a neural network with one hidden layer.


When I doing a slot filling project, I compare these mechanisms. *Concat* attention produce the best result.

Ref:

1. [[http://cnyah.com/2017/08/01/attention-variants/][Attention Variants]]
2. [[https://lilianweng.github.io/lil-log/2018/06/24/attention-attention.html][Attention? Attention!]]
3. [[https://towardsdatascience.com/attention-seq2seq-with-pytorch-learning-to-invert-a-sequence-34faf4133e53][Attention Seq2Seq with PyTorch: learning to invert a sequence]]
*** DONE The Annotated /The Annotated Transformer/
CLOSED: [2019-09-01 Sun 16:00]
   :PROPERTIES:
   :EXPORT_FILE_NAME: the-annotated-the-annotated-transformer
   :END:
Thanks for the articles I list at the end of this post, I understand how transformers works. These posts are comprehensive, but there are some points that confused me.

First, this is the graph that was referenced by almost all of the post related to Transformer.

#+attr_html: :width 400
[[file:/images/transformer_main.png]]

Transformer consists of these parts: Input, Encoder*N, Output Input, Decoder*N, Output. I'll explain them step by step.

**** Input

The input word will map to 512 dimension vector. Then generate Positional Encoding(PE) and add it to the original embeddings.



***** Positional Encoding

The transformer model does not contains recurrence and convolution. In order to let the model capture the sequence of input word, it add PE into embeddings.

#+attr_html: :width 500
[[file:/images/transformer_add_pe.png]]


PE will generate a 512 dimension vector for each position:

$$\begin{align*}
    PE_{(pos,2i)} = sin(pos / 10000^{2i/d_{model}}) \\
    PE_{(pos,2i+1)} = cos(pos / 10000^{2i/d_{model}})
\end{align*}$$
The even and odd dimension use =sin= and =cos= function respectively.

For example, the second word's PE should be: $sin(2 / 10000^{0 / 512}), cos(2 / 10000^{0 / 512}), sin(2 / 10000^{2 / 512}), cos(2 / 10000^{2 / 512})\text{...}$

The value range of PE is =(-1,1)=, and each position's PE is slight different, as =cos= and =sin= has different frequency. Also, for any fixed offset k, $PE_{pos+k}$ can be represented as a linear function of $PE_{pos}$.

For even dimension, let $10000^{2i/d_{model}}$ be $\alpha$, for even dimension:

$$\begin{aligned}
PE_{pos+k}&=sin((pos+k)/\alpha) \\
&=sin(pos/\alpha)cos(k/\alpha)+cos(pos/\alpha)sin(k/\alpha)\\
&=PE_{pos\_even}K_1+PE_{pos\_odd}K_2
\end{aligned}$$

#+attr_html: :width 500
[[file:/images/transformer_pe1.png]]

The PE implementation in [[https://github.com/tensorflow/tensor2tensor/blob/5bfe69a7d68b7d61d51fac36c6088f94b9d6fdc6/tensor2tensor/layers/common_attention.py#L457][tensor2tensor]] use =sin= in first half of dimension and =cos= in the rest part of dimension.
#+attr_html: :width 500
[[file:/images/transformer_pe2.png]]


**** Encoder

There are 6 Encoder layer in Transformer, each layer consists of two sub-layer: Multi-Head Attention and Feed Forward Neural Network.

***** Multi-Head Attention

Let's begin with single head attention. In short, it maps word embeddings to =q= =k= =v= and use =q= =k= =v= vector to calculate the attention.

The input words map to =q= =k= =v= by multiply the Query, Keys Values matrix. Then for the given Query, the attention for each word in sentence will be calculated by this formula: $\mathrm{attention}=\mathrm{softmax}(\frac{qk^T}{\sqrt{d_k}})v$, where =q= =k= =v= is a 64 dimension vector.
#+attr_html: :width 500
[[file:/images/transformer_self_attention.png]]


Matrix view:

$Attention(Q, K, V) = \mathrm{softmax}(\frac{(XW^Q)(XW^K)^T}{\sqrt{d_k}})(XW^V)$ where $X$ is the input embedding.

The single head attention only output a 64 dimension vector, but the input dimension is 512. How to transform back to 512? That's why transformer has multi-head attention.

Each head has its own $W^Q$ $W^K$ $W^V$ matrix, and produces $Z_0,Z_1...Z_7$,($Z_0$'s shape is =(512, 64)=) the concat the outputted vectors as $O$. $O$ will multiply a weight matrix $W^O$ ($W^O$'s shape is =(512, 512)=) and the result is $Z$, which will be sent to Feed Forward Network.

#+attr_html: :width 500
[[file:/images/transformer_multihead.png]]

Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions.

The whole procedure looks like this:

#+attr_html: :width 500
[[file:/images/transformer_multihead_all.png]]



***** Add & Norm

This layer works like this line of code: =norm(x+dropout(sublayer(x)))= or =x+dropout(sublayer(norm(x)))=.

****** Layer Normalization

Layer Norm is similar to Batch Normalization, but it tries to normalize the whole layer's features rather than each feature.(*Scale* and *Shift* also apply for each feature) More details can be found in this [[https://arxiv.org/abs/1607.06450][paper]].

#+attr_html: :width 500
[[file:/images/transformer_layer_norm.png]]

***** Position-wise Feed Forward Network

This layer is a Neural Network whose size is =(512, 2048, 512)=. The exact same feed-forward network is independently applied to each position.

#+attr_html: :width 500
[[file:/images/transformer_encoder.png]]

**** Output Input

Same as Input.

**** Decoder

The decoder is pretty similar to Encoder. It also has 6 layers, but has 3 sublayers in each Decoder. It add a masked multi-head-attention at the beginning of Decoder.

***** Masked Multi-Head Attention

This layer is used to block future words during training. For example, if the output is =<bos> hello world <eos>=. First, we should use =<bos>= as input to predict =hello=, =hello world <eos>= will be masked to 0.

***** Key and Value in Second Sub-layer

In Encoder, the =q= =k= =v= vector is generated by $XW^Q$, $XW^K$ and $XW^V$. In the second sub-layer of Decoder, =q= =k= =v= was generated by $XW^Q$, $YW^K$ and $YW^V$, where $Y$ is the Encoder's output.

The animation below illustrates how to apply the Transformer to machine translation.

#+attr_html: :width 500
[[file:/images/transformer_translate.gif]]

**** Output

Using a linear layer to predict the output.

Ref:

1. [[http://nlp.seas.harvard.edu/2018/04/03/attention.html][The Annotated Transformer]]
2. [[http://jalammar.github.io/illustrated-transformer/][The Illustrated Transformer]]
3. [[https://mchromiak.github.io/articles/2017/Sep/12/Transformer-Attention-is-all-you-need/#.XMb3ZC97FPs][The Transformer – Attention is all you need]]
4. [[https://medium.com/@bgg/seq2seq-pay-attention-to-self-attention-part-2-cf81bf32c73d][Seq2seq pay Attention to Self Attention: Part 2]]
5. [[https://juejin.im/post/5b9f1af0e51d450e425eb32d][Transformer模型的PyTorch实现]]
6. [[https://towardsdatascience.com/how-to-code-the-transformer-in-pytorch-24db27c8f9ec][How to code The Transformer in Pytorch]]
7. [[https://towardsdatascience.com/deconstructing-bert-part-2-visualizing-the-inner-workings-of-attention-60a16d86b5c1][Deconstructing BERT, Part 2: Visualizing the Inner Workings of Attention]]
8. [[https://ai.googleblog.com/2017/08/transformer-novel-neural-network.html][Transformer: A Novel Neural Network Architecture for Language Understanding]]


** Python                                                            :Python:
*** DONE Create Node Benchmark in Py2neo
CLOSED: [2018-11-05 Mon 15:55]
   :PROPERTIES:
   :EXPORT_FILE_NAME: create-node-benchmark-in-py2neo
   :END:
Recently, I'm working on a neo4j project. I use =Py2neo= to interact with graph db. Alghough =Py2neo= is a very pythonic and easy to use, its performance is really poor. Sometimes I have to manually write cypher statement by myself if I can't bear with the slow excution. Here is a small script which I use to compare the performance of 4 diffrent ways to insert nodes.

#+BEGIN_SRC python
import time

from graph_db import graph

from py2neo.data import Node, Subgraph


def delete_label(label):
    graph.run('MATCH (n:{}) DETACH DELETE n'.format(label))


def delete_all():
    print('delete all')
    graph.run('match (n) detach delete n')


def count_label(label):
    return len(graph.nodes.match(label))


def bench_create1():
    print('Using py2neo one by one')
    delete_label('test')
    start = time.time()
    tx = graph.begin()
    for i in range(100000):
        n = Node('test', id=i)
        tx.create(n)
    tx.commit()
    print(time.time() - start)
    print(count_label('test'))
    delete_label('test')


def bench_create2():
    print('Using cypher one by one')
    delete_label('test')
    start = time.time()
    tx = graph.begin()
    for i in range(100000):
        tx.run('create (n:test {id: $id})', id=i)
        if i and i % 1000 == 0:
            tx.commit()
            tx = graph.begin()
    tx.commit()
    print(time.time() - start)
    print(count_label('test'))
    delete_label('test')


def bench_create3():
    print('Using Subgraph')
    delete_label('test')
    start = time.time()
    tx = graph.begin()
    nodes = []
    for i in range(100000):
        nodes.append(Node('test', id=i))
    s = Subgraph(nodes=nodes)
    tx.create(s)
    tx.commit()
    print(time.time() - start)
    print(count_label('test'))
    delete_label('test')


def bench_create4():
    print('Using unwind')
    delete_label('test')
    start = time.time()
    tx = graph.begin()
    ids = list(range(100000))
    tx.run('unwind $ids as id create (n:test {id: id})', ids=ids)
    tx.commit()
    print(time.time() - start)
    print(count_label('test'))
    delete_label('test')


def bench_create():
    create_tests = [bench_create1, bench_create2, bench_create3, bench_create4]

    print('testing create')
    for i in create_tests:
        i()


if __name__ == '__main__':
    bench_create()
#+END_SRC

Apparently, using cypher with =unwind= keyword is the fastest way to batch insert nodes.
#+BEGIN_SRC text
testing create
Using py2neo one by one
96.09799289703369
100000
Using cypher one by one
9.493892192840576
100000
Using Subgraph
7.638832092285156
100000
Using unwind
2.511630058288574
100000
#+END_SRC

The above result is based on =http= protocol. A very interesting result is that, =bolt= protocol will decrease the time of the first method, but double the time of sencond method. That's wired, maybe =py2neo= has some special opitimization when doing batch insert on =bolt= protocol? But I have no idea why insert one by one with cypher is 2x slower. Here is the result of =bolt= protocol.
#+BEGIN_SRC text
testing create
Using py2neo one by one
51.73185706138611
100000
Using cypher one by one
22.051995992660522
100000
Using Subgraph
8.81674599647522
100000
Using unwind
2.8623900413513184
100000
#+END_SRC

*** DONE CSRF in Django                                              :Django:
CLOSED: [2018-11-07 Wed 13:58]
   :PROPERTIES:
   :EXPORT_FILE_NAME: csrf-in-django
   :END:
CSRF(Cross-site request forgery) is a way to generate fake user request to target website. For example, on a malicious website A, there is a button, click it will send request to www.B.com/logout. When the user click this button, he will logout from website B unconsciously. Logout is not a big problem, but malicious website can generate more dangerous request like money transfer.

**** Django CSRF protection

Each web framework has different approach to do CSRF protection. In Django, the  validation process is below:

1. When user login for the first time, Django generate a =csrf_secret=, add random salt and encrypt it as A, save A to cookie =csrftoken=.
2. When Django processing tag ={{ csrf_token }}= or ={% csrf_token %}=, it read =csrftoken= cookie A, reverse it to =csrf_secret=, add random salt and encrypt it as B, return corresponding HTML.
3. When Django receive POST request, it will retrive cookie =csrftoken= as A, and tries to get =csrfmiddlewaretoken= value B from POST data, if it does not exist, it will get header =X-CSRFToken= value as B. Then A and B will be reversed to =csrf_secret=. If the values are identical, the validation is passed. Otherwise, a 403 error will raise.

**** Django CSRF Usage

**** Form
#+BEGIN_SRC html
<form>
    {% csrf_token %}
</form>
#+END_SRC

**** Single AJAX request

#+BEGIN_SRC js
$.ajax({
    data: {
        csrfmiddlewaretoken: '{{ csrf_token }}'
    },
#+END_SRC

**** Multiple AJAX request

#+BEGIN_SRC js
function getCookie(name) {
    var cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = jQuery.trim(cookies[i]);
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}
var csrftoken = getCookie('csrftoken');

function csrfSafeMethod(method) {
    // these HTTP methods do not require CSRF protection
    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
}
$.ajaxSetup({
    beforeSend: function(xhr, settings) {
        if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
            xhr.setRequestHeader("X-CSRFToken", csrftoken);
        }
    }
});
#+END_SRC


Ref:
1. [[https://docs.djangoproject.com/en/2.1/ref/csrf/][Cross Site Request Forgery protection]]
2. [[https://github.com/django/django/blob/master/django/middleware/csrf.py][csrf.py]]
3. [[https://stackoverflow.com/questions/48002861/whats-the-relationship-between-csrfmiddlewaretoken-and-csrftoken][What's the relationship between csrfmiddlewaretoken and csrftoken?]] 

*** DONE Deploy Nikola Org Mode on Travis                  :Nikola:Org__Mode:
CLOSED: [2018-11-03 Sat 14:22]
   :PROPERTIES:
   :EXPORT_FILE_NAME: deploy-nikola-org-mode-on-travis
   :END:
Recently, I enjoy using =Spacemacs=, so I decided to switch to org file from Markdown for writing blog. After several attempts, I managed to let Travis convert org file to HTML. Here are the steps.
**** Install Org Mode plugin
First you need to install Org Mode plugin on your computer following the official guide: [[https://plugins.getnikola.com/v8/orgmode/][Nikola orgmode plugin]].
**** Edit =conf.el=
=Org Mode= will convert to HTML to display on Nikola. Org Mode plugin will call Emacs to do this job. When I run =nikola build=, it shows this message: =Please install htmlize from https://github.com/hniksic/emacs-htmlize=. I'm using =Spacemacs=, the =htmlize= package is already downloaded if the =org= layer is enabled. I just need to add htmlize folder to load-path. So here is the code:
#+BEGIN_SRC elisp
(setq dir "~/.emacs.d/elpa/27.0/develop/")
(if(file-directory-p dir)
    (let ((default-directory dir))
      (normal-top-level-add-subdirs-to-load-path)))
(require 'htmlize)
#+END_SRC

This package is also needed on Travis, the similar approach is required.

**** Modify =.travis.yml=
Travis is using ubuntu 14.04, and the default Emacs version is 24, and the Org Mode version is below 8.0, which not match the requirements. The easiest solution is to update Emacs to 25. So in the =before_install= section, add these code:
#+BEGIN_SRC yaml
- sudo add-apt-repository ppa:kelleyk/emacs -y
- sudo apt-get update
#+END_SRC
In the =install= section, add these code:
#+BEGIN_SRC yaml
- sudo apt-get remove emacs
- sudo apt autoremove
- sudo apt-get install emacs25
#+END_SRC

The default emacs doesn't contains =htmlize= package. So add =git clone https://github.com/hniksic/emacs-htmlize ~/emacs-htmlize= into =before_install= section.

Finally, modify =conf.el= for Travis Emacs, add GitHub repo to =load-path=: =(add-to-list 'load-path "~/emacs-htmlize/")=

Voila, the org file should show up.

The full =.travis.yml= is below:
#+BEGIN_SRC yaml
language: python
cache: apt
sudo: false
addons:
  apt:
    packages:
    - language-pack-en-base
branches:
  only:
  - src
python:
- 3.6
before_install:
- sudo add-apt-repository ppa:kelleyk/emacs -y
- sudo apt-get update
- openssl aes-256-cbc -K $encrypted_a5c638e4bedc_key -iv $encrypted_a5c638e4bedc_iv
  -in travis.enc -out travis -d
- git config --global user.name 'bebound'
- git config --global user.email 'bebound@gmail.com'
- git config --global push.default 'simple'
- pip install --upgrade pip wheel
- echo -e 'Host github.com\n    StrictHostKeyChecking no' >> ~/.ssh/config
- eval "$(ssh-agent -s)"
- chmod 600 travis
- ssh-add travis
- git remote rm origin
- git remote add origin git@github.com:bebound/bebound.github.io
- git fetch origin master
- git branch master FETCH_HEAD
- git clone https://github.com/hniksic/emacs-htmlize ~/emacs-htmlize
install:
- pip install 'Nikola[extras]'==7.8.15
- sudo apt-get remove emacs
- sudo apt autoremove
- sudo apt-get install emacs25
script:
- nikola build && nikola github_deploy -m 'Nikola auto deploy [ci skip]'
notifications:
  email:
    on_success: change
    on_failure: always
#+END_SRC

And here is the =conf.el=:
#+BEGIN_SRC elisp
(setq dir "~/.emacs.d/elpa/27.0/develop/")
(if(file-directory-p dir)
    (let ((default-directory dir))
      (normal-top-level-add-subdirs-to-load-path)))
(add-to-list 'load-path "~/emacs-htmlize/")
(require 'htmlize)
#+END_SRC
*** DONE Enable C Extension for gensim on Windows
CLOSED: [2017-06-10 Sat 14:43]
   :PROPERTIES:
   :EXPORT_FILE_NAME: enable-c-extension-for-gensim-on-windows
   :END:
These days, I’m working on some text classification works, and I use =gensim=’s =doc2vec= function.

When using gensim, it shows this warning message:
```
C extension not loaded for Word2Vec, training will be slow.
```

I search this on Internet and found that gensim has rewrite some part of the code using `cython` rather than `numpy` to get better performance. A compiler is required to enable this feature.

I tried to install mingw and add it into the path, but it's not working.

Finally, I tried to install [[https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017][Visual C++ Build Tools]] and it works.

If this output a none =-1= digit, then it's fine.
```python3
from gensim.models import word2vec
print(word2vec.FAST_VERSION)
```
*** DONE Using Chinese Characters in Matplotlib                  :Matplotlib:
CLOSED: [2018-10-04 Thu 15:53]
   :PROPERTIES:
   :EXPORT_FILE_NAME: using-chinese-characters-in-matplotlib
   :END:
After searching from Google, here is easiest solution. This should also works on other languages:

#+BEGIN_SRC python
import matplotlib.pyplot as plt
%matplotlib inline
%config InlineBackend.figure_format = 'retina'

import matplotlib.font_manager as fm
f = "/System/Library/Fonts/PingFang.ttc"
prop = fm.FontProperties(fname=f)

plt.title("你好",fontproperties=prop)
plt.show()
#+END_SRC

Output:

#+attr_html: :width 400
[[file:/images/matplot_chinese.png]]
*** DONE Python Dictionary Implementation
CLOSED: [2019-02-17 Sun 21:48]
   :PROPERTIES:
   :EXPORT_FILE_NAME: python-dictionary-implementation
   :END:
**** Overview
1. CPython allocation memory to save dictionary, the initial table size is 8, entries are saved as =<hash,key,value>= in each slot(The slot content changed after Python 3.6).
2. When a new key is added, python use =i = hash(key) & mask= where =mask=table_size-1= to calculate which slot it should be placed. If the slot is occupied, CPython using a probing algorithm to find the empty slot to store new item.
3. When 2/3 of the table is full, the table will be resized.
4. When getting item from dictionary, both =hash= and =key= must be equal.

**** Resizing
When elements size is below 50000, the table size will increase by a factor of 4 based on used slots. Otherwise, it will increase by a factor of 2.

So the table size increase like this: 8->8*2/3*4=24->24*2/3*4=64->...

Removing item from dictionary doesn't lead to shrink table. The value of the item will marks as null but not empty. To prevent early stopping when looking for other element.
**** Probing
CPython used a modified *random probing* algorithm to choose the empty slot. This algorithm can traval all of the slots in a pseudo random order.

The travel order can be calculated by this formula: =j = ((5*j) + 1) mod 2**i=, where =j= is slot index.

For example, if table size is 8, and the calculate slot index is 2, then the traversal order should be:

=2 -> (5*2+1) mod 8 = 3 -> (5*3+1) mod 8 = 0 -> (5*0+1) mod 8 = 1 -> 6 -> 7 -> 4 -> 5 -> 2=

CPython changed this formula by adding =perturb= and =PERTURB_SHIFT= variables, where =perturb= is hash value and =PERTURB_SHIFT= is 5. By adding =PERTURB_SHIFT=, the probe sequence depends on every bit in the hash code, and the collision probability is decreased. And =perturb= will eventually becomes to 0, this ensures that all of the slots will be checked.

#+BEGIN_SRC 
j = (5*j) + 1 + perturb;
perturb >>= PERTURB_SHIFT;
j = j % 2**i
#+END_SRC

**** Dictionary improvement after 3.6
CPython 3.6 use a compact representation to save entries, and "The memory usage of the new dict() is between 20% and 25% smaller compared to Python 3.5".

***** Compact Hash Table
As mentioned before, entries saved in the form of =<hash,key,value>=. This will takes 3B on 64 bit machine. And no matter how much item is added into the dictionary, the memory usage is the same(3B*table_size).

After 3.6, CPython use two structure to save data. One is *index*, another is the *real data*.

For example, if the table size is 8, and there is an item in slot 1, the *index* looks like this:

=[null, 0, null, null, null, null, null, null]=

And the *real data* is:
#+BEGIN_SRC 
| hash | key  | value |
| xxx1 | yyy1 | zzz1  |
#+END_SRC

0 represents the items index on *real data*. If another item is added in slot 3, the new *index* become this:

=[null, 0, null, 1, null, null, null, null]=

The *real data* become this:
#+BEGIN_SRC 
| hash | key  | value |
| xxx1 | yyy1 | zzz1  |
| xxx2 | yyy2 | zzz2  |
#+END_SRC
This saves memory, especially when table is not full.


Ref:

1. [[https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented][How are Python's Built In Dictionaries Implemented]]
2. [[https://hg.python.org/cpython/file/52f68c95e025/Objects/dictobject.c#l33][cpython source code]]
3. [[https://stackoverflow.com/questions/3020514/is-it-possible-to-give-a-python-dict-an-initial-capacity-and-is-it-useful/3020810][Is it possible to give a python dict an initial capacity (and is it useful)]]
4. [[http://www.laurentluce.com/posts/python-dictionary-implementation/][Python dictionary implementation]]

*** DONE Circular Import in Python
CLOSED: [2019-03-10 Sun 10:59]
   :PROPERTIES:
   :EXPORT_FILE_NAME: circular-import-in-python
   :END:
Recently, I found a really good example code for Python circular import, and I'd like to record it here.

Here is the code:

#+BEGIN_SRC python3 -n
# X.py
def X1():
    return "x1"

from Y import Y2

def X2():
    return "x2"
#+END_SRC

#+BEGIN_SRC python3 -n
# Y.py
def Y1():
    return "y1"

from X import X1

def Y2():
    return "y2"
#+END_SRC

Guess what will happen if you run =python X.py= and =python Y.py=?

Here is the answer, the first one outputs this:
#+BEGIN_SRC 
Traceback (most recent call last):
  File "X.py", line 4, in <module>
    from Y import Y2
  File "/Users/kk/Y.py", line 4, in <module>
    from X import X1
  File "/Users/kk/X.py", line 4, in <module>
    from Y import Y2
ImportError: cannot import name Y2
#+END_SRC
The second one runs normally.

If this is the same as you thought, you already know how python import works. You don't need to read this post.

**** Python import machinery
When Python imports a module for the first time, it create a new module object and set =sys.modules[module_name]=module object= , then executes execute in module object to define its content. If you import that module again, Python will just return the object save in =sys.modules=.

In =X.py= line 5, Python add =Y= into =sys.modules= and start execute code in =Y.py=. In =Y.xy= line5, it pause import Y, add =X= into =sys.modules=, and execute code =X.py=. Back to =X.py= line5, Python find =Y= in =sys.modules= and try to import Y2 in Y. But =Y2= is not yet defined, so the ImportError was raised.
**** How to fix
- Change import order.
- Wrap function call related to other module into =configure= function, call it manually.
- Dynamic import(use import within a function).

Ref:

1. [[https://stackabuse.com/python-circular-imports/][Python Circular Imports]]
2. [[https://stackoverflow.com/questions/22187279/python-circular-importing][StackOverflow: Python Cirluar Importing]]
3. [[https://stackoverflow.com/questions/744373/circular-or-cyclic-imports-in-python][StackOverflow: Circular imports in Python]] 
4. [[https://www.amazon.com/Effective-Python-Specific-Software-Development/dp/0134034287][Effective Python: 59 Specific Ways to Write Better Python]]
5. [[https://docs.python.org/3/reference/import.html][Python doc: The import system]]

*** DONE Torchtext snippets                               :torchtext:PyTorch:
CLOSED: [2019-07-01 Mon 21:28]
   :PROPERTIES:
   :EXPORT_FILE_NAME: torchtext-snippets
   :END:
**** Load separate files
=data.Field= parameters is [[https://torchtext.readthedocs.io/en/latest/data.html#torchtext.data.Field][here]].
#+begin_src python
  INPUT = data.Field(lower=True, batch_first=True)
  TAG = data.Field(batch_first=True, unk_token=None, is_target=True)

  train, val, test = data.TabularDataset.splits(path=base_dir.as_posix(), train='train_data.csv',
                                                  validation='val_data.csv', test='test_data.csv',
                                                  format='tsv',
                                                  fields=[(None, None), ('input', INPUT), ('tag', TAG)])
#+end_src
**** Load single file
#+begin_src python
  all_data = data.TabularDataset(path=base_dir / 'gossip_train_data.csv',
                                 format='tsv',
                                 fields=[('text', TEXT), ('category', CATEGORY)])
  train, val, test = all_data.split([0.7, 0.2, 0.1])
#+end_src
**** Create iterator
#+begin_src python
train_iter, val_iter, test_iter = data.BucketIterator.splits(
    (train, val, test), batch_sizes=(32, 256, 256), shuffle=True,
    sort_key=lambda x: x.input)
#+end_src
**** Load pretrained vector
#+begin_src python
  vectors = Vectors(name='cc.zh.300.vec', cache='./')

  INPUT.build_vocab(train, vectors=vectors)
  TAG.build_vocab(train, val, test)
#+end_src
**** Check vocab sizes
By default, torchtext will add =<unk>= in vocab, if =sequential=True=, it will add =<pad>= in vocab. You can view vocab index by =vocab.itos=.
#+begin_src python
  tag_size = len(TAG.vocab) - 1
#+end_src
**** Use field vector in model
#+begin_src python
  vec = INPUT.vocab.vectors

  class Model:
      nn.Embedding.from_pretrained(vec, freeze=False)
#+end_src
**** Convert text to vector
#+begin_src python
  s = ' '.join(segmentize(s))
  s = INPUT.preprocess(s)
  vec = INPUT.process([s])
#+end_src

** Misc
*** DONE Some Useful Shell Tools                                      :Shell:
CLOSED: [2017-05-07 Sun 15:34]
   :PROPERTIES:
   :EXPORT_FILE_NAME: some-useful-shell-tools
   :END:
Here are some shell tools I use, which can boost your productivity.
**** [[https://github.com/sorin-ionescu/prezto][Prezto]] 
A zsh configuration framework. Provides auto completion, prompt theme and lots of modules to work with other useful tools. I extremely love the =agnoster= theme.
#+attr_html: :width 400
[[file:/images/shell_agnoster.png]]
**** [[https://github.com/clvv/fasd][Fasd]]
Help you to navigate between folders and launch application.

Here are the official usage example:
```
  v def conf       =>     vim /some/awkward/path/to/type/default.conf
  j abc            =>     cd /hell/of/a/awkward/path/to/get/to/abcdef
  m movie          =>     mplayer /whatever/whatever/whatever/awesome_movie.mp4
  o eng paper      =>     xdg-open /you/dont/remember/where/english_paper.pdf
  vim `f rc lo`    =>     vim /etc/rc.local
  vim `f rc conf`  =>     vim /etc/rc.conf
```
**** [[https://github.com/monochromegane/the_platinum_searcher][pt]]
A fast code search tool similar to =ack=.
**** [[https://github.com/junegunn/fzf][fzf]] 
A great fuzzy finder, it can also integrate with vim by [[https://github.com/junegunn/fzf.vim][fzf.vim]]

#+attr_html: :width 400
[[file:/images/shell_fzf.gif]]
**** [[https://github.com/nvbn/thefuck][thefuck]] 
Magnificent app which corrects your previous console command.

#+attr_html: :width 400
[[file:/images/shell_thefuck.gif]]
*** DONE Start
CLOSED: [2017-04-18 Tue 15:46]
   :PROPERTIES:
   :EXPORT_FILE_NAME: start
   :END:
Over the years, I have read so many programmers’ blogs, which has helped me a lot. Now I think it’s the time to start my own blog.

I hope this can enforce myself to review what I have learned, and it would even be better if someone can benefit from it.
*** DONE Preview LaTeX in Org Mode in MacOS           :Emacs:Org__Mode:LaTeX:
CLOSED: [2019-05-12 Sun 20:26]
   :PROPERTIES:
   :EXPORT_FILE_NAME: preview-latex-in-org-mode-in-macos
   :END:
**** Using the right Emacs Version
I failed to preview LaTeX with =emacs-plus=. If you have installed =d12frosted/emacs-plus=, uninstall it and use =emacs-mac=.

#+begin_src 
brew tap railwaycat/emacsmacport
brew install emacs-mac
#+end_src

If you like the fancy spacemacs icon, install it with cask: =brew cask install emacs-mac-spacemacs-icon=

**** Install Tex
- Download and install BasicTeX.pkg [[http://www.tug.org/mactex/morepackages.html][here]].
- Add =/Library/TeX/texbin= to PATH.
- Install =dvisvgm= by =sudo tlmgr update --self && sudo tlmgr install dvisvgm collection-fontsrecommended=

**** Emacs settings
- Add TeX related bin to path: =(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin"))=
- Tell Org Mode to create svg images: =(setq org-latex-create-formula-image-program 'dvisvgm)=

Now you can see the rendered LaTeX equation by calling =org-preview-latex-fragment= or using shortcut =,Tx=. 

If you want to load LaTeX previews automatically at startup, add this at the beginning of org file: =#+STARTUP: latexpreview=.

-----

- update 19-07-31

  =_= and =...= are not displayed in Emacs, as some fonts are missing. =tlmgr install collection-fontsrecommended= should fix this.

  =Org Preview Latex= buffer also warns =processing of PostScript specials is disabled (Ghostscript not found)=, remove this message by =brew install ghostscript=.

*** DONE Build Your Own Tiny Tiny RSS Service
CLOSED: [2019-06-10 Mon 00:25]
   :PROPERTIES:
   :EXPORT_FILE_NAME: build-your-own-tiny-tiny-rss-service
   :END:
After Inoreader change the free plan, which limit the max subscription to 150, I begin to find an alternative. Finally, I found Tiny Tiny RSS. It has a nice website and has the fever API Plugin which was supported by most of the RSS reader APP, so you can read RSS on all of you devices.

This post will tell you how to deploy it on your server.

**** Prerequisite
You need to install [[https://docs.docker.com/install/][Docker]] and [[https://docs.docker.com/compose/install/][Docker Compose]] before using =docker-compose.yml=

**** Install docker
Make a new =ttrss= folder, create =docker-compose.yml= with this content:
#+begin_src yaml
version: "3"
services:
  database.postgres:
    image: sameersbn/postgresql:latest
    container_name: postgres
    environment:
      - PG_PASSWORD=PWD # please change the password
      - DB_EXTENSION=pg_trgm
    volumes:
      - ~/postgres/data/:/var/lib/postgresql/ # persist postgres data to ~/postgres/data/ on the host
    ports:
      - 5433:5432
    restart: always

  service.rss:
    image: wangqiru/ttrss:latest
    container_name: ttrss
    ports:
      - 181:80
    environment:
      - SELF_URL_PATH=https://RSS.com/ # please change to your own domain
      - DB_HOST=database.postgres
      - DB_PORT=5432
      - DB_NAME=ttrss
      - DB_USER=postgres
      - DB_PASS=PWD # please change the password
      - ENABLE_PLUGINS=auth_internal,fever,api_newsplus # auth_internal is required. Plugins enabled here will be enabled for all users as system plugins
      - SESSION_COOKIE_LIFETIME = 8760
    stdin_open: true
    tty: true
    restart: always
    command: sh -c 'sh /wait-for.sh database.postgres:5432 -- php /configure-db.php && exec s6-svscan /etc/s6/'

  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page
    image: wangqiru/mercury-parser-api:latest
    container_name: mercury
    expose:
      - 3000
    ports:
      - 3000:3000
    restart: always
#+end_src

Run this command to deploy: =docker-compose up -d=. After it finished, the TTRSS service is running on port =181=, the default account is =admin= with password =password=.

I made minor modification on the yml file, you can find the latest file [[https://github.com/HenryQW/Awesome-TTRSS][here]].

**** Nginx configuration

If you have a domain and you can use Nginx as reverse proxy to redirect TTRSS to the domain.

#+begin_src 
upstream ttrssdev {
    server 127.0.0.1:181;
}

server {
    listen 80;
    server_name  RSS.com;
    return 301 https://RSS.com/$request_uri;
}

server {
    listen 443 ssl;
    gzip on;
    server_name  RSS.com;


    access_log /var/log/nginx/ttrssdev_access.log combined;
    error_log  /var/log/nginx/ttrssdev_error.log;

    location / {
        proxy_redirect off;
        proxy_pass http://ttrssdev;

        proxy_set_header  Host                $http_host;
        proxy_set_header  X-Real-IP           $remote_addr;
        proxy_set_header  X-Forwarded-Ssl     on;
        proxy_set_header  X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto   $scheme;
        proxy_set_header  X-Frame-Options     SAMEORIGIN;

        client_max_body_size        100m;
        client_body_buffer_size     128k;

        proxy_buffer_size           4k;
        proxy_buffers               4 32k;
        proxy_busy_buffers_size     64k;
        proxy_temp_file_write_size  64k;
    }
    ssl_certificate /etc/letsencrypt/live/rss.fromkk.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/rss.fromkk.com/privkey.pem; # managed by Certbot

}
#+end_src

To enable HTTPS on your website, you can use [[https://certbot.eff.org][certbot]].

**** Fever API and Mercury

- Fever
  1. Check =Enable API: Allows accessing this account through the API= in preference
  2. Enter a new password for fever in =Plugins - Fever Emulation=
- Mecury Fulltext Extraction
  1. Check =mecury-fulltext= plugin in =Preference - Plugins=
  2. Set Mercury Parser API address to =service.mercury:3000= in =Feeds - Mercury Fulltext settings=

**** Update
Simply run this command to update TTRSS code.
#+begin_src
docker-compose down
docker-compose up -d
#+end_src

**** APP recommendation
[[https://reederapp.com][Reeder 4]] works great on my iPad. It's smooth and fast, and is worth every penny.

If you want a free APP, I suggest [[http://cocoacake.net/apps/fiery/][Fiery Feeds]]. I stopped using it after ver 2.2, as it's so lagging. If this issue was fixed, I thought it was the biggest competitor for Reeder 4. For more alternative, read this article: [[https://thesweetsetup.com/apps/best-rss-app-ipad/][The Best RSS App for iPhone and iPad]].

Ref:

1. [[https://henry.wang/2018/04/25/ttrss-docker-plugins-guide.html][A ttrss setup guide - Start your own RSS aggregator today]]
